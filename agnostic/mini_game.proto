syntax = "proto3";

package generated;

// GAME STATE

message Game {
    map<uint32, Player> players = 1;
    optional Round round = 2;
}

message Player {
    string name = 1;
    uint32 draw_score = 3;
    uint32 guess_score = 4;
    uint32 round_score = 5;
    bool connected = 6;
}

message Round {
    uint32 round_id = 1;
    Phase phase = 10;
    uint64 phase_ends_at = 12;
    uint32 drawer_id = 2;
    repeated DrawOp draw_ops = 3;
    uint32 easy_word = 4;
    uint32 hard_word = 5;
    WordChoice word_choice = 11;
    uint32 draw_score = 6;
    uint32 guess_score = 7;
    repeated Guess guesses = 8;
    repeated Hint hints = 9;
}

// choose word 10 secs
// pre play 5 secs
// play 45 - 60 secs
// post play 5 secs
enum Phase {
    CHOOSE_WORD = 0;
    PRE_PLAY = 1;
    PLAY = 2;
    POST_PLAY = 3;
}

enum WordChoice {
    EASY = 0;
    HARD = 1;
}

message Guess {
    uint32 guesser_id = 1;
    oneof guess_type {
        IncorrectGuess incorrect_guess = 2;
        CorrectGuess correct_guess = 3;
    }
    uint32 after_draw_ops = 4;
}

message IncorrectGuess {
    string guess = 1;
}

message CorrectGuess {}

message Hint {
    oneof hint_type {
        RevealLength reveal_length = 1;
        RevealLetter reveal_letter = 2;
    }
    uint32 after_draw_ops = 3;
}

message RevealLength {}

message RevealLetter {
    uint32 index = 1;
}

message DrawOp {
    oneof do_type {
        DoSetColor set_color = 1;
        DoStartStroke start_stroke = 2;
        DoContinueStroke continue_stroke = 3;
        DoClearScreen clear_screen = 4;
        DoUndo undo = 5;
        DoRedo redo = 6;
    }
}

enum ColorType {
    PRIMARY = 0;
    SECONDARY = 1;
}

message DoSetColor {
    ColorType color_type = 1;
    string color = 2;
}

message DoStartStroke {
    ColorType color_type = 1;
    float x = 2;
    float y = 3;
}

message DoContinueStroke {
    float x = 1;
    float y = 2;
}

message DoClearScreen {}

message DoUndo {}

message DoRedo {}

// SERVER EVENTS
// Se = [S]erver [e]vent
// mostly represent game state transitions
// but can also be other things, like
// communicating server errors to client

message SeSetGame {
    uint32 player_id = 1;
    Game game = 2;
}

enum SeErrorType {
    UNKNOWN = 0;
    ALREADY_CONNECTED = 1;
    FULL_GAME = 2;
}

message SeError {
    SeErrorType se_error_type = 1;
    string message = 2;
}

message SePlayerJoin {
    uint32 player_id = 1;
    string name = 2;
}

message SePlayerLeave {
    uint32 player_id = 1;
}

message SePlayerConnect {
    uint32 player_id = 1;
}

message SePlayerDisconnect {
    uint32 player_id = 1;
}

message SePlayerRename {
    uint32 player_id = 1;
    string name = 2;
}

message SePlayerIncRoundScore {
    uint32 player_id = 1;
    uint32 inc_by = 2;
}

message SePlayerIncDrawScore {
    uint32 drawer_id = 1;
    uint32 inc_by = 2;
}

message SePlayerIncGuessScore {
    uint32 guesser_id = 1;
    uint32 inc_by = 2;
}

// round_id not necessary as it always
// refers to the current round
message SeRoundIncDrawScore {
    uint32 inc_by = 1;
}

// round_id not necessary as it always
// refers to the current round
message SeRoundIncGuessScore {
    uint32 inc_by = 1;
}

message SePlayerDrawOp {
    uint32 drawer_id = 1;
    DrawOp draw_op = 2;
}

message SeRoundNew {
    uint32 round_id = 1;
    uint32 drawer_id = 2;
    uint32 easy_word = 3;
    uint32 hard_word = 4;
    Phase starting_phase = 5;
    uint64 phase_ends_at = 6;
}

message SeRoundChangePhase {
    Phase phase = 1;
    uint64 phase_ends_at = 2;
}

message SePlayerChooseWord {
    uint32 drawer_id = 1;
    WordChoice choice = 2;
}

message SePlayerGuessWord {
    uint32 guesser_id = 1;
    string guess = 2;
    uint32 after_draw_ops = 3;
}

message SePlayerLikeRound {
    uint32 player_id = 1;
    uint32 round_id = 2;
}

message ServerEvent {
    oneof se_type {
        SePlayerJoin player_join = 1;
        SePlayerLeave player_leave = 2;
        SePlayerRename player_rename = 3;
        SePlayerIncRoundScore player_inc_round_score = 4;
        SePlayerIncDrawScore player_inc_draw_score = 10;
        SePlayerIncGuessScore player_inc_guess_score = 11;
        SeSetGame set_game = 5;
        SeError error = 6;
        SePlayerConnect player_connect = 7;
        SePlayerDisconnect player_disconnect = 8;
        SePlayerDrawOp player_draw_op = 9;
        SeRoundNew new_round = 12;
        SePlayerChooseWord player_choose_word = 13;
        SePlayerGuessWord player_guess_word = 14;
        SePlayerLikeRound player_like_round = 15;
        SeRoundIncDrawScore round_inc_draw_score = 16;
        SeRoundIncGuessScore round_inc_guess_score = 17;
        SeRoundChangePhase round_change_phase = 18;
    }
}

message ServerEvents {
    repeated ServerEvent events = 1;
}

// CLIENT EVENTS
// Ce = [C]lient [e]vent
// mostly represent player actions

message CeRename {
    string name = 1;
}

message CeChooseWord {
    WordChoice choice = 1;
}

message CeGuessWord {
    string guess = 1;
    uint32 after_draw_ops = 3;
}

message CeLikeRound {
    uint32 round_id = 1;
}

message CeDrawOp {
    DrawOp draw_op = 1;
}


message ClientEvent {
    oneof ce_type {
        CeRename rename = 1;
        CeChooseWord choose_word = 2;
        CeGuessWord guess_word = 3;
        CeLikeRound like_round = 4;
        CeDrawOp draw_op = 5;
    }
}
