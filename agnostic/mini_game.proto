syntax = "proto3";

package mini_game;

// GAME STATE

message Game {
    map<uint32, Player> players = 1;
}

message Player {
    string name = 1;
    uint32 score = 2;
	bool connected = 3;
}

// SERVER EVENTS
// Se = [S]erver [e]vent
// mostly represent game state transitions
// but can also be other things, like
// communicating server errors to client

message SeSetGame {
    uint32 player_id = 1;
    Game game = 2;
}

enum SeErrorType {
    UNKNOWN = 0;
    ALREADY_CONNECTED = 1;
    FULL_GAME = 2;
}

message SeError {
    SeErrorType type = 1;
    string message = 2;
}

message SePlayerJoin {
    uint32 id = 1;
    string name = 2;
}

message SePlayerLeave {
    uint32 id = 1;
}

message SePlayerConnect {
    uint32 id = 1;
}

message SePlayerDisconnect {
    uint32 id = 1;
}

message SePlayerRename {
    uint32 id = 1;
    string name = 2;
}

message SePlayerIncreaseScore {
    uint32 id = 1;
    uint32 score = 2;
}

message ServerEvent {
    oneof type {
        SePlayerJoin player_join = 1;
        SePlayerLeave player_leave = 2;
        SePlayerRename player_rename = 3;
        SePlayerIncreaseScore player_increase_score = 4;
        SeSetGame set_game = 5;
        SeError error = 6;
        SePlayerConnect player_connect = 7;
        SePlayerDisconnect player_disconnect = 8;
    }
}

message ServerEvents {
    repeated ServerEvent events = 1;
}

// CLIENT EVENTS
// Ce = [C]lient [e]vent
// mostly represent player actions

message CeRename {
    string name = 1;
}

message CeIncreaseScore {
    uint32 score = 1;
}

message ClientEvent {
    oneof type {
        CeRename rename = 1;
        CeIncreaseScore increase_score = 2;
    }
}
