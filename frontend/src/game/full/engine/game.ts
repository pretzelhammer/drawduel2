// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "generated";

export enum SeErrorType {
  UNKNOWN = 0,
  ALREADY_CONNECTED = 1,
  FULL_GAME = 2,
  UNRECOGNIZED = -1,
}

export function seErrorTypeFromJSON(object: any): SeErrorType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SeErrorType.UNKNOWN;
    case 1:
    case "ALREADY_CONNECTED":
      return SeErrorType.ALREADY_CONNECTED;
    case 2:
    case "FULL_GAME":
      return SeErrorType.FULL_GAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SeErrorType.UNRECOGNIZED;
  }
}

export function seErrorTypeToJSON(object: SeErrorType): string {
  switch (object) {
    case SeErrorType.UNKNOWN:
      return "UNKNOWN";
    case SeErrorType.ALREADY_CONNECTED:
      return "ALREADY_CONNECTED";
    case SeErrorType.FULL_GAME:
      return "FULL_GAME";
    case SeErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Game {
  players: { [key: number]: Player };
  admin: number;
}

export interface Game_PlayersEntry {
  key: number;
  value: Player | undefined;
}

export interface Player {
  name: string;
  score: number;
  connected: boolean;
  ready: boolean;
}

export interface SeSetGame {
  playerId: number;
  game: Game | undefined;
}

export interface SeError {
  type: SeErrorType;
  message: string;
}

export interface SePlayerJoin {
  id: number;
  name: string;
}

export interface SePlayerConnect {
  id: number;
}

export interface SePlayerLeave {
  id: number;
}

export interface SePlayerDisconnect {
  id: number;
}

export interface SePlayerRename {
  id: number;
  name: string;
}

export interface SePlayerIncreaseScore {
  id: number;
  score: number;
}

export interface ServerEvent {
  playerJoin?: SePlayerJoin | undefined;
  playerLeave?: SePlayerLeave | undefined;
  playerRename?: SePlayerRename | undefined;
  playerIncreaseScore?: SePlayerIncreaseScore | undefined;
  setGame?: SeSetGame | undefined;
  error?: SeError | undefined;
  playerConnect?: SePlayerConnect | undefined;
  playerDisconnect?: SePlayerDisconnect | undefined;
}

export interface ServerEvents {
  events: ServerEvent[];
}

export interface CeRename {
  name: string;
}

export interface CeIncreaseScore {
  score: number;
}

export interface PlayerEvent {
  rename?: CeRename | undefined;
  increaseScore?: CeIncreaseScore | undefined;
}

function createBaseGame(): Game {
  return { players: {}, admin: 0 };
}

export const Game: MessageFns<Game> = {
  encode(message: Game, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.players).forEach(([key, value]) => {
      Game_PlayersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.admin !== 0) {
      writer.uint32(16).uint32(message.admin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Game_PlayersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.players[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.admin = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      players: isObject(object.players)
        ? Object.entries(object.players).reduce<{ [key: number]: Player }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Player.fromJSON(value);
          return acc;
        }, {})
        : {},
      admin: isSet(object.admin) ? globalThis.Number(object.admin) : 0,
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (message.players) {
      const entries = Object.entries(message.players);
      if (entries.length > 0) {
        obj.players = {};
        entries.forEach(([k, v]) => {
          obj.players[k] = Player.toJSON(v);
        });
      }
    }
    if (message.admin !== 0) {
      obj.admin = Math.round(message.admin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game>, I>>(base?: I): Game {
    return Game.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game>, I>>(object: I): Game {
    const message = createBaseGame();
    message.players = Object.entries(object.players ?? {}).reduce<{ [key: number]: Player }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Player.fromPartial(value);
      }
      return acc;
    }, {});
    message.admin = object.admin ?? 0;
    return message;
  },
};

function createBaseGame_PlayersEntry(): Game_PlayersEntry {
  return { key: 0, value: undefined };
}

export const Game_PlayersEntry: MessageFns<Game_PlayersEntry> = {
  encode(message: Game_PlayersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Player.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game_PlayersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame_PlayersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Player.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game_PlayersEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Player.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Game_PlayersEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Player.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game_PlayersEntry>, I>>(base?: I): Game_PlayersEntry {
    return Game_PlayersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game_PlayersEntry>, I>>(object: I): Game_PlayersEntry {
    const message = createBaseGame_PlayersEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Player.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePlayer(): Player {
  return { name: "", score: 0, connected: false, ready: false };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.score !== 0) {
      writer.uint32(24).uint32(message.score);
    }
    if (message.connected !== false) {
      writer.uint32(32).bool(message.connected);
    }
    if (message.ready !== false) {
      writer.uint32(40).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.connected = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      connected: isSet(object.connected) ? globalThis.Boolean(object.connected) : false,
      ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.connected !== false) {
      obj.connected = message.connected;
    }
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.name = object.name ?? "";
    message.score = object.score ?? 0;
    message.connected = object.connected ?? false;
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBaseSeSetGame(): SeSetGame {
  return { playerId: 0, game: undefined };
}

export const SeSetGame: MessageFns<SeSetGame> = {
  encode(message: SeSetGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.game !== undefined) {
      Game.encode(message.game, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeSetGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeSetGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.game = Game.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeSetGame {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      game: isSet(object.game) ? Game.fromJSON(object.game) : undefined,
    };
  },

  toJSON(message: SeSetGame): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.game !== undefined) {
      obj.game = Game.toJSON(message.game);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeSetGame>, I>>(base?: I): SeSetGame {
    return SeSetGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeSetGame>, I>>(object: I): SeSetGame {
    const message = createBaseSeSetGame();
    message.playerId = object.playerId ?? 0;
    message.game = (object.game !== undefined && object.game !== null) ? Game.fromPartial(object.game) : undefined;
    return message;
  },
};

function createBaseSeError(): SeError {
  return { type: 0, message: "" };
}

export const SeError: MessageFns<SeError> = {
  encode(message: SeError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeError {
    return {
      type: isSet(object.type) ? seErrorTypeFromJSON(object.type) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SeError): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = seErrorTypeToJSON(message.type);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeError>, I>>(base?: I): SeError {
    return SeError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeError>, I>>(object: I): SeError {
    const message = createBaseSeError();
    message.type = object.type ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSePlayerJoin(): SePlayerJoin {
  return { id: 0, name: "" };
}

export const SePlayerJoin: MessageFns<SePlayerJoin> = {
  encode(message: SePlayerJoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerJoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerJoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerJoin {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: SePlayerJoin): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerJoin>, I>>(base?: I): SePlayerJoin {
    return SePlayerJoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerJoin>, I>>(object: I): SePlayerJoin {
    const message = createBaseSePlayerJoin();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSePlayerConnect(): SePlayerConnect {
  return { id: 0 };
}

export const SePlayerConnect: MessageFns<SePlayerConnect> = {
  encode(message: SePlayerConnect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerConnect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerConnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerConnect {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: SePlayerConnect): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerConnect>, I>>(base?: I): SePlayerConnect {
    return SePlayerConnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerConnect>, I>>(object: I): SePlayerConnect {
    const message = createBaseSePlayerConnect();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseSePlayerLeave(): SePlayerLeave {
  return { id: 0 };
}

export const SePlayerLeave: MessageFns<SePlayerLeave> = {
  encode(message: SePlayerLeave, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerLeave {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerLeave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerLeave {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: SePlayerLeave): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerLeave>, I>>(base?: I): SePlayerLeave {
    return SePlayerLeave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerLeave>, I>>(object: I): SePlayerLeave {
    const message = createBaseSePlayerLeave();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseSePlayerDisconnect(): SePlayerDisconnect {
  return { id: 0 };
}

export const SePlayerDisconnect: MessageFns<SePlayerDisconnect> = {
  encode(message: SePlayerDisconnect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerDisconnect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerDisconnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerDisconnect {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: SePlayerDisconnect): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerDisconnect>, I>>(base?: I): SePlayerDisconnect {
    return SePlayerDisconnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerDisconnect>, I>>(object: I): SePlayerDisconnect {
    const message = createBaseSePlayerDisconnect();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseSePlayerRename(): SePlayerRename {
  return { id: 0, name: "" };
}

export const SePlayerRename: MessageFns<SePlayerRename> = {
  encode(message: SePlayerRename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerRename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerRename {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: SePlayerRename): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerRename>, I>>(base?: I): SePlayerRename {
    return SePlayerRename.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerRename>, I>>(object: I): SePlayerRename {
    const message = createBaseSePlayerRename();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSePlayerIncreaseScore(): SePlayerIncreaseScore {
  return { id: 0, score: 0 };
}

export const SePlayerIncreaseScore: MessageFns<SePlayerIncreaseScore> = {
  encode(message: SePlayerIncreaseScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.score !== 0) {
      writer.uint32(16).uint32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerIncreaseScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerIncreaseScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerIncreaseScore {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: SePlayerIncreaseScore): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerIncreaseScore>, I>>(base?: I): SePlayerIncreaseScore {
    return SePlayerIncreaseScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerIncreaseScore>, I>>(object: I): SePlayerIncreaseScore {
    const message = createBaseSePlayerIncreaseScore();
    message.id = object.id ?? 0;
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseServerEvent(): ServerEvent {
  return {
    playerJoin: undefined,
    playerLeave: undefined,
    playerRename: undefined,
    playerIncreaseScore: undefined,
    setGame: undefined,
    error: undefined,
    playerConnect: undefined,
    playerDisconnect: undefined,
  };
}

export const ServerEvent: MessageFns<ServerEvent> = {
  encode(message: ServerEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerJoin !== undefined) {
      SePlayerJoin.encode(message.playerJoin, writer.uint32(10).fork()).join();
    }
    if (message.playerLeave !== undefined) {
      SePlayerLeave.encode(message.playerLeave, writer.uint32(18).fork()).join();
    }
    if (message.playerRename !== undefined) {
      SePlayerRename.encode(message.playerRename, writer.uint32(26).fork()).join();
    }
    if (message.playerIncreaseScore !== undefined) {
      SePlayerIncreaseScore.encode(message.playerIncreaseScore, writer.uint32(34).fork()).join();
    }
    if (message.setGame !== undefined) {
      SeSetGame.encode(message.setGame, writer.uint32(42).fork()).join();
    }
    if (message.error !== undefined) {
      SeError.encode(message.error, writer.uint32(50).fork()).join();
    }
    if (message.playerConnect !== undefined) {
      SePlayerConnect.encode(message.playerConnect, writer.uint32(58).fork()).join();
    }
    if (message.playerDisconnect !== undefined) {
      SePlayerDisconnect.encode(message.playerDisconnect, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerJoin = SePlayerJoin.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerLeave = SePlayerLeave.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerRename = SePlayerRename.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playerIncreaseScore = SePlayerIncreaseScore.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.setGame = SeSetGame.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.error = SeError.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.playerConnect = SePlayerConnect.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.playerDisconnect = SePlayerDisconnect.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent {
    return {
      playerJoin: isSet(object.playerJoin) ? SePlayerJoin.fromJSON(object.playerJoin) : undefined,
      playerLeave: isSet(object.playerLeave) ? SePlayerLeave.fromJSON(object.playerLeave) : undefined,
      playerRename: isSet(object.playerRename) ? SePlayerRename.fromJSON(object.playerRename) : undefined,
      playerIncreaseScore: isSet(object.playerIncreaseScore)
        ? SePlayerIncreaseScore.fromJSON(object.playerIncreaseScore)
        : undefined,
      setGame: isSet(object.setGame) ? SeSetGame.fromJSON(object.setGame) : undefined,
      error: isSet(object.error) ? SeError.fromJSON(object.error) : undefined,
      playerConnect: isSet(object.playerConnect) ? SePlayerConnect.fromJSON(object.playerConnect) : undefined,
      playerDisconnect: isSet(object.playerDisconnect)
        ? SePlayerDisconnect.fromJSON(object.playerDisconnect)
        : undefined,
    };
  },

  toJSON(message: ServerEvent): unknown {
    const obj: any = {};
    if (message.playerJoin !== undefined) {
      obj.playerJoin = SePlayerJoin.toJSON(message.playerJoin);
    }
    if (message.playerLeave !== undefined) {
      obj.playerLeave = SePlayerLeave.toJSON(message.playerLeave);
    }
    if (message.playerRename !== undefined) {
      obj.playerRename = SePlayerRename.toJSON(message.playerRename);
    }
    if (message.playerIncreaseScore !== undefined) {
      obj.playerIncreaseScore = SePlayerIncreaseScore.toJSON(message.playerIncreaseScore);
    }
    if (message.setGame !== undefined) {
      obj.setGame = SeSetGame.toJSON(message.setGame);
    }
    if (message.error !== undefined) {
      obj.error = SeError.toJSON(message.error);
    }
    if (message.playerConnect !== undefined) {
      obj.playerConnect = SePlayerConnect.toJSON(message.playerConnect);
    }
    if (message.playerDisconnect !== undefined) {
      obj.playerDisconnect = SePlayerDisconnect.toJSON(message.playerDisconnect);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent>, I>>(base?: I): ServerEvent {
    return ServerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent>, I>>(object: I): ServerEvent {
    const message = createBaseServerEvent();
    message.playerJoin = (object.playerJoin !== undefined && object.playerJoin !== null)
      ? SePlayerJoin.fromPartial(object.playerJoin)
      : undefined;
    message.playerLeave = (object.playerLeave !== undefined && object.playerLeave !== null)
      ? SePlayerLeave.fromPartial(object.playerLeave)
      : undefined;
    message.playerRename = (object.playerRename !== undefined && object.playerRename !== null)
      ? SePlayerRename.fromPartial(object.playerRename)
      : undefined;
    message.playerIncreaseScore = (object.playerIncreaseScore !== undefined && object.playerIncreaseScore !== null)
      ? SePlayerIncreaseScore.fromPartial(object.playerIncreaseScore)
      : undefined;
    message.setGame = (object.setGame !== undefined && object.setGame !== null)
      ? SeSetGame.fromPartial(object.setGame)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? SeError.fromPartial(object.error)
      : undefined;
    message.playerConnect = (object.playerConnect !== undefined && object.playerConnect !== null)
      ? SePlayerConnect.fromPartial(object.playerConnect)
      : undefined;
    message.playerDisconnect = (object.playerDisconnect !== undefined && object.playerDisconnect !== null)
      ? SePlayerDisconnect.fromPartial(object.playerDisconnect)
      : undefined;
    return message;
  },
};

function createBaseServerEvents(): ServerEvents {
  return { events: [] };
}

export const ServerEvents: MessageFns<ServerEvents> = {
  encode(message: ServerEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      ServerEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(ServerEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvents {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => ServerEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: ServerEvents): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => ServerEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvents>, I>>(base?: I): ServerEvents {
    return ServerEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvents>, I>>(object: I): ServerEvents {
    const message = createBaseServerEvents();
    message.events = object.events?.map((e) => ServerEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCeRename(): CeRename {
  return { name: "" };
}

export const CeRename: MessageFns<CeRename> = {
  encode(message: CeRename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeRename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeRename {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CeRename): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeRename>, I>>(base?: I): CeRename {
    return CeRename.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeRename>, I>>(object: I): CeRename {
    const message = createBaseCeRename();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCeIncreaseScore(): CeIncreaseScore {
  return { score: 0 };
}

export const CeIncreaseScore: MessageFns<CeIncreaseScore> = {
  encode(message: CeIncreaseScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== 0) {
      writer.uint32(8).uint32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeIncreaseScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeIncreaseScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeIncreaseScore {
    return { score: isSet(object.score) ? globalThis.Number(object.score) : 0 };
  },

  toJSON(message: CeIncreaseScore): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeIncreaseScore>, I>>(base?: I): CeIncreaseScore {
    return CeIncreaseScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeIncreaseScore>, I>>(object: I): CeIncreaseScore {
    const message = createBaseCeIncreaseScore();
    message.score = object.score ?? 0;
    return message;
  },
};

function createBasePlayerEvent(): PlayerEvent {
  return { rename: undefined, increaseScore: undefined };
}

export const PlayerEvent: MessageFns<PlayerEvent> = {
  encode(message: PlayerEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rename !== undefined) {
      CeRename.encode(message.rename, writer.uint32(10).fork()).join();
    }
    if (message.increaseScore !== undefined) {
      CeIncreaseScore.encode(message.increaseScore, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rename = CeRename.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.increaseScore = CeIncreaseScore.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEvent {
    return {
      rename: isSet(object.rename) ? CeRename.fromJSON(object.rename) : undefined,
      increaseScore: isSet(object.increaseScore) ? CeIncreaseScore.fromJSON(object.increaseScore) : undefined,
    };
  },

  toJSON(message: PlayerEvent): unknown {
    const obj: any = {};
    if (message.rename !== undefined) {
      obj.rename = CeRename.toJSON(message.rename);
    }
    if (message.increaseScore !== undefined) {
      obj.increaseScore = CeIncreaseScore.toJSON(message.increaseScore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEvent>, I>>(base?: I): PlayerEvent {
    return PlayerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerEvent>, I>>(object: I): PlayerEvent {
    const message = createBasePlayerEvent();
    message.rename = (object.rename !== undefined && object.rename !== null)
      ? CeRename.fromPartial(object.rename)
      : undefined;
    message.increaseScore = (object.increaseScore !== undefined && object.increaseScore !== null)
      ? CeIncreaseScore.fromPartial(object.increaseScore)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
