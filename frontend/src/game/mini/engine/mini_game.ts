// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: mini_game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "generated";

/**
 * choose word 10 secs
 * pre play 5 secs
 * play 45 - 60 secs
 * post play 5 secs
 */
export enum Phase {
  CHOOSE_WORD = 0,
  PRE_PLAY = 1,
  PLAY = 2,
  POST_PLAY = 3,
  UNRECOGNIZED = -1,
}

export function phaseFromJSON(object: any): Phase {
  switch (object) {
    case 0:
    case "CHOOSE_WORD":
      return Phase.CHOOSE_WORD;
    case 1:
    case "PRE_PLAY":
      return Phase.PRE_PLAY;
    case 2:
    case "PLAY":
      return Phase.PLAY;
    case 3:
    case "POST_PLAY":
      return Phase.POST_PLAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Phase.UNRECOGNIZED;
  }
}

export function phaseToJSON(object: Phase): string {
  switch (object) {
    case Phase.CHOOSE_WORD:
      return "CHOOSE_WORD";
    case Phase.PRE_PLAY:
      return "PRE_PLAY";
    case Phase.PLAY:
      return "PLAY";
    case Phase.POST_PLAY:
      return "POST_PLAY";
    case Phase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WordChoice {
  EASY = 0,
  HARD = 1,
  UNRECOGNIZED = -1,
}

export function wordChoiceFromJSON(object: any): WordChoice {
  switch (object) {
    case 0:
    case "EASY":
      return WordChoice.EASY;
    case 1:
    case "HARD":
      return WordChoice.HARD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WordChoice.UNRECOGNIZED;
  }
}

export function wordChoiceToJSON(object: WordChoice): string {
  switch (object) {
    case WordChoice.EASY:
      return "EASY";
    case WordChoice.HARD:
      return "HARD";
    case WordChoice.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ColorType {
  PRIMARY = 0,
  SECONDARY = 1,
  UNRECOGNIZED = -1,
}

export function colorTypeFromJSON(object: any): ColorType {
  switch (object) {
    case 0:
    case "PRIMARY":
      return ColorType.PRIMARY;
    case 1:
    case "SECONDARY":
      return ColorType.SECONDARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ColorType.UNRECOGNIZED;
  }
}

export function colorTypeToJSON(object: ColorType): string {
  switch (object) {
    case ColorType.PRIMARY:
      return "PRIMARY";
    case ColorType.SECONDARY:
      return "SECONDARY";
    case ColorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SeErrorType {
  UNKNOWN = 0,
  ALREADY_CONNECTED = 1,
  FULL_GAME = 2,
  UNRECOGNIZED = -1,
}

export function seErrorTypeFromJSON(object: any): SeErrorType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SeErrorType.UNKNOWN;
    case 1:
    case "ALREADY_CONNECTED":
      return SeErrorType.ALREADY_CONNECTED;
    case 2:
    case "FULL_GAME":
      return SeErrorType.FULL_GAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SeErrorType.UNRECOGNIZED;
  }
}

export function seErrorTypeToJSON(object: SeErrorType): string {
  switch (object) {
    case SeErrorType.UNKNOWN:
      return "UNKNOWN";
    case SeErrorType.ALREADY_CONNECTED:
      return "ALREADY_CONNECTED";
    case SeErrorType.FULL_GAME:
      return "FULL_GAME";
    case SeErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Game {
  players: { [key: number]: Player };
  round?: Round | undefined;
}

export interface Game_PlayersEntry {
  key: number;
  value: Player | undefined;
}

export interface Player {
  name: string;
  drawScore: number;
  guessScore: number;
  roundScore: number;
  connected: boolean;
}

export interface Round {
  roundId: number;
  phase: Phase;
  phaseEndsAt: number;
  drawerId: number;
  drawOps: DrawOp[];
  easyWord: number;
  hardWord: number;
  wordChoice: WordChoice;
  drawScore: number;
  guessScore: number;
  guesses: Guess[];
  hints: Hint[];
}

export interface Guess {
  guesserId: number;
  incorrectGuess?: IncorrectGuess | undefined;
  correctGuess?: CorrectGuess | undefined;
  afterDrawOps: number;
}

export interface IncorrectGuess {
  guess: string;
}

export interface CorrectGuess {
}

export interface Hint {
  revealLength?: RevealLength | undefined;
  revealLetter?: RevealLetter | undefined;
  afterDrawOps: number;
}

export interface RevealLength {
}

export interface RevealLetter {
  index: number;
}

export interface DrawOp {
  setColor?: DoSetColor | undefined;
  startStroke?: DoStartStroke | undefined;
  continueStroke?: DoContinueStroke | undefined;
  clearScreen?: DoClearScreen | undefined;
  undo?: DoUndo | undefined;
  redo?: DoRedo | undefined;
}

export interface DoSetColor {
  colorType: ColorType;
  color: string;
}

export interface DoStartStroke {
  colorType: ColorType;
  x: number;
  y: number;
}

export interface DoContinueStroke {
  x: number;
  y: number;
}

export interface DoClearScreen {
}

export interface DoUndo {
}

export interface DoRedo {
}

export interface SeSetGame {
  playerId: number;
  game: Game | undefined;
}

export interface SeError {
  seErrorType: SeErrorType;
  message: string;
}

export interface SePlayerJoin {
  playerId: number;
  name: string;
}

export interface SePlayerLeave {
  playerId: number;
}

export interface SePlayerConnect {
  playerId: number;
}

export interface SePlayerDisconnect {
  playerId: number;
}

export interface SePlayerRename {
  playerId: number;
  name: string;
}

export interface SePlayerIncRoundScore {
  playerId: number;
  incBy: number;
}

export interface SePlayerIncDrawScore {
  drawerId: number;
  incBy: number;
}

export interface SePlayerIncGuessScore {
  guesserId: number;
  incBy: number;
}

/**
 * round_id not necessary as it always
 * refers to the current round
 */
export interface SeRoundIncDrawScore {
  incBy: number;
}

/**
 * round_id not necessary as it always
 * refers to the current round
 */
export interface SeRoundIncGuessScore {
  incBy: number;
}

export interface SePlayerDrawOp {
  drawerId: number;
  drawOp: DrawOp | undefined;
}

export interface SeRoundNew {
  roundId: number;
  drawerId: number;
  easyWord: number;
  hardWord: number;
  startingPhase: Phase;
  phaseEndsAt: number;
}

export interface SeRoundChangePhase {
  phase: Phase;
  phaseEndsAt: number;
}

export interface SePlayerChooseWord {
  drawerId: number;
  choice: WordChoice;
}

export interface SePlayerGuessWord {
  guesserId: number;
  guess: string;
  afterDrawOps: number;
}

export interface SePlayerLikeRound {
  playerId: number;
  roundId: number;
}

export interface ServerEvent {
  playerJoin?: SePlayerJoin | undefined;
  playerLeave?: SePlayerLeave | undefined;
  playerRename?: SePlayerRename | undefined;
  playerIncRoundScore?: SePlayerIncRoundScore | undefined;
  playerIncDrawScore?: SePlayerIncDrawScore | undefined;
  playerIncGuessScore?: SePlayerIncGuessScore | undefined;
  setGame?: SeSetGame | undefined;
  error?: SeError | undefined;
  playerConnect?: SePlayerConnect | undefined;
  playerDisconnect?: SePlayerDisconnect | undefined;
  playerDrawOp?: SePlayerDrawOp | undefined;
  newRound?: SeRoundNew | undefined;
  playerChooseWord?: SePlayerChooseWord | undefined;
  playerGuessWord?: SePlayerGuessWord | undefined;
  playerLikeRound?: SePlayerLikeRound | undefined;
  roundIncDrawScore?: SeRoundIncDrawScore | undefined;
  roundIncGuessScore?: SeRoundIncGuessScore | undefined;
  roundChangePhase?: SeRoundChangePhase | undefined;
}

export interface ServerEvents {
  events: ServerEvent[];
}

export interface CeRename {
  name: string;
}

export interface CeChooseWord {
  choice: WordChoice;
}

export interface CeGuessWord {
  guess: string;
  afterDrawOps: number;
}

export interface CeLikeRound {
  roundId: number;
}

export interface CeDrawOp {
  drawOp: DrawOp | undefined;
}

export interface ClientEvent {
  rename?: CeRename | undefined;
  chooseWord?: CeChooseWord | undefined;
  guessWord?: CeGuessWord | undefined;
  likeRound?: CeLikeRound | undefined;
  drawOp?: CeDrawOp | undefined;
}

function createBaseGame(): Game {
  return { players: {}, round: undefined };
}

export const Game: MessageFns<Game> = {
  encode(message: Game, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.players).forEach(([key, value]) => {
      Game_PlayersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.round !== undefined) {
      Round.encode(message.round, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Game_PlayersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.players[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.round = Round.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      players: isObject(object.players)
        ? Object.entries(object.players).reduce<{ [key: number]: Player }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Player.fromJSON(value);
          return acc;
        }, {})
        : {},
      round: isSet(object.round) ? Round.fromJSON(object.round) : undefined,
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (message.players) {
      const entries = Object.entries(message.players);
      if (entries.length > 0) {
        obj.players = {};
        entries.forEach(([k, v]) => {
          obj.players[k] = Player.toJSON(v);
        });
      }
    }
    if (message.round !== undefined) {
      obj.round = Round.toJSON(message.round);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game>, I>>(base?: I): Game {
    return Game.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game>, I>>(object: I): Game {
    const message = createBaseGame();
    message.players = Object.entries(object.players ?? {}).reduce<{ [key: number]: Player }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Player.fromPartial(value);
      }
      return acc;
    }, {});
    message.round = (object.round !== undefined && object.round !== null) ? Round.fromPartial(object.round) : undefined;
    return message;
  },
};

function createBaseGame_PlayersEntry(): Game_PlayersEntry {
  return { key: 0, value: undefined };
}

export const Game_PlayersEntry: MessageFns<Game_PlayersEntry> = {
  encode(message: Game_PlayersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Player.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game_PlayersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame_PlayersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Player.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game_PlayersEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Player.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Game_PlayersEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Player.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game_PlayersEntry>, I>>(base?: I): Game_PlayersEntry {
    return Game_PlayersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game_PlayersEntry>, I>>(object: I): Game_PlayersEntry {
    const message = createBaseGame_PlayersEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Player.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePlayer(): Player {
  return { name: "", drawScore: 0, guessScore: 0, roundScore: 0, connected: false };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.drawScore !== 0) {
      writer.uint32(24).uint32(message.drawScore);
    }
    if (message.guessScore !== 0) {
      writer.uint32(32).uint32(message.guessScore);
    }
    if (message.roundScore !== 0) {
      writer.uint32(40).uint32(message.roundScore);
    }
    if (message.connected !== false) {
      writer.uint32(48).bool(message.connected);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.drawScore = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.guessScore = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.roundScore = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.connected = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      drawScore: isSet(object.drawScore) ? globalThis.Number(object.drawScore) : 0,
      guessScore: isSet(object.guessScore) ? globalThis.Number(object.guessScore) : 0,
      roundScore: isSet(object.roundScore) ? globalThis.Number(object.roundScore) : 0,
      connected: isSet(object.connected) ? globalThis.Boolean(object.connected) : false,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.drawScore !== 0) {
      obj.drawScore = Math.round(message.drawScore);
    }
    if (message.guessScore !== 0) {
      obj.guessScore = Math.round(message.guessScore);
    }
    if (message.roundScore !== 0) {
      obj.roundScore = Math.round(message.roundScore);
    }
    if (message.connected !== false) {
      obj.connected = message.connected;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.name = object.name ?? "";
    message.drawScore = object.drawScore ?? 0;
    message.guessScore = object.guessScore ?? 0;
    message.roundScore = object.roundScore ?? 0;
    message.connected = object.connected ?? false;
    return message;
  },
};

function createBaseRound(): Round {
  return {
    roundId: 0,
    phase: 0,
    phaseEndsAt: 0,
    drawerId: 0,
    drawOps: [],
    easyWord: 0,
    hardWord: 0,
    wordChoice: 0,
    drawScore: 0,
    guessScore: 0,
    guesses: [],
    hints: [],
  };
}

export const Round: MessageFns<Round> = {
  encode(message: Round, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roundId !== 0) {
      writer.uint32(8).uint32(message.roundId);
    }
    if (message.phase !== 0) {
      writer.uint32(80).int32(message.phase);
    }
    if (message.phaseEndsAt !== 0) {
      writer.uint32(96).uint64(message.phaseEndsAt);
    }
    if (message.drawerId !== 0) {
      writer.uint32(16).uint32(message.drawerId);
    }
    for (const v of message.drawOps) {
      DrawOp.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.easyWord !== 0) {
      writer.uint32(32).uint32(message.easyWord);
    }
    if (message.hardWord !== 0) {
      writer.uint32(40).uint32(message.hardWord);
    }
    if (message.wordChoice !== 0) {
      writer.uint32(88).int32(message.wordChoice);
    }
    if (message.drawScore !== 0) {
      writer.uint32(48).uint32(message.drawScore);
    }
    if (message.guessScore !== 0) {
      writer.uint32(56).uint32(message.guessScore);
    }
    for (const v of message.guesses) {
      Guess.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.hints) {
      Hint.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Round {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roundId = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.phase = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.phaseEndsAt = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.drawerId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.drawOps.push(DrawOp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.easyWord = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hardWord = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.wordChoice = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.drawScore = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.guessScore = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.guesses.push(Guess.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.hints.push(Hint.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Round {
    return {
      roundId: isSet(object.roundId) ? globalThis.Number(object.roundId) : 0,
      phase: isSet(object.phase) ? phaseFromJSON(object.phase) : 0,
      phaseEndsAt: isSet(object.phaseEndsAt) ? globalThis.Number(object.phaseEndsAt) : 0,
      drawerId: isSet(object.drawerId) ? globalThis.Number(object.drawerId) : 0,
      drawOps: globalThis.Array.isArray(object?.drawOps) ? object.drawOps.map((e: any) => DrawOp.fromJSON(e)) : [],
      easyWord: isSet(object.easyWord) ? globalThis.Number(object.easyWord) : 0,
      hardWord: isSet(object.hardWord) ? globalThis.Number(object.hardWord) : 0,
      wordChoice: isSet(object.wordChoice) ? wordChoiceFromJSON(object.wordChoice) : 0,
      drawScore: isSet(object.drawScore) ? globalThis.Number(object.drawScore) : 0,
      guessScore: isSet(object.guessScore) ? globalThis.Number(object.guessScore) : 0,
      guesses: globalThis.Array.isArray(object?.guesses) ? object.guesses.map((e: any) => Guess.fromJSON(e)) : [],
      hints: globalThis.Array.isArray(object?.hints) ? object.hints.map((e: any) => Hint.fromJSON(e)) : [],
    };
  },

  toJSON(message: Round): unknown {
    const obj: any = {};
    if (message.roundId !== 0) {
      obj.roundId = Math.round(message.roundId);
    }
    if (message.phase !== 0) {
      obj.phase = phaseToJSON(message.phase);
    }
    if (message.phaseEndsAt !== 0) {
      obj.phaseEndsAt = Math.round(message.phaseEndsAt);
    }
    if (message.drawerId !== 0) {
      obj.drawerId = Math.round(message.drawerId);
    }
    if (message.drawOps?.length) {
      obj.drawOps = message.drawOps.map((e) => DrawOp.toJSON(e));
    }
    if (message.easyWord !== 0) {
      obj.easyWord = Math.round(message.easyWord);
    }
    if (message.hardWord !== 0) {
      obj.hardWord = Math.round(message.hardWord);
    }
    if (message.wordChoice !== 0) {
      obj.wordChoice = wordChoiceToJSON(message.wordChoice);
    }
    if (message.drawScore !== 0) {
      obj.drawScore = Math.round(message.drawScore);
    }
    if (message.guessScore !== 0) {
      obj.guessScore = Math.round(message.guessScore);
    }
    if (message.guesses?.length) {
      obj.guesses = message.guesses.map((e) => Guess.toJSON(e));
    }
    if (message.hints?.length) {
      obj.hints = message.hints.map((e) => Hint.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Round>, I>>(base?: I): Round {
    return Round.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Round>, I>>(object: I): Round {
    const message = createBaseRound();
    message.roundId = object.roundId ?? 0;
    message.phase = object.phase ?? 0;
    message.phaseEndsAt = object.phaseEndsAt ?? 0;
    message.drawerId = object.drawerId ?? 0;
    message.drawOps = object.drawOps?.map((e) => DrawOp.fromPartial(e)) || [];
    message.easyWord = object.easyWord ?? 0;
    message.hardWord = object.hardWord ?? 0;
    message.wordChoice = object.wordChoice ?? 0;
    message.drawScore = object.drawScore ?? 0;
    message.guessScore = object.guessScore ?? 0;
    message.guesses = object.guesses?.map((e) => Guess.fromPartial(e)) || [];
    message.hints = object.hints?.map((e) => Hint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGuess(): Guess {
  return { guesserId: 0, incorrectGuess: undefined, correctGuess: undefined, afterDrawOps: 0 };
}

export const Guess: MessageFns<Guess> = {
  encode(message: Guess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guesserId !== 0) {
      writer.uint32(8).uint32(message.guesserId);
    }
    if (message.incorrectGuess !== undefined) {
      IncorrectGuess.encode(message.incorrectGuess, writer.uint32(18).fork()).join();
    }
    if (message.correctGuess !== undefined) {
      CorrectGuess.encode(message.correctGuess, writer.uint32(26).fork()).join();
    }
    if (message.afterDrawOps !== 0) {
      writer.uint32(32).uint32(message.afterDrawOps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Guess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGuess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.guesserId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.incorrectGuess = IncorrectGuess.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.correctGuess = CorrectGuess.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.afterDrawOps = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Guess {
    return {
      guesserId: isSet(object.guesserId) ? globalThis.Number(object.guesserId) : 0,
      incorrectGuess: isSet(object.incorrectGuess) ? IncorrectGuess.fromJSON(object.incorrectGuess) : undefined,
      correctGuess: isSet(object.correctGuess) ? CorrectGuess.fromJSON(object.correctGuess) : undefined,
      afterDrawOps: isSet(object.afterDrawOps) ? globalThis.Number(object.afterDrawOps) : 0,
    };
  },

  toJSON(message: Guess): unknown {
    const obj: any = {};
    if (message.guesserId !== 0) {
      obj.guesserId = Math.round(message.guesserId);
    }
    if (message.incorrectGuess !== undefined) {
      obj.incorrectGuess = IncorrectGuess.toJSON(message.incorrectGuess);
    }
    if (message.correctGuess !== undefined) {
      obj.correctGuess = CorrectGuess.toJSON(message.correctGuess);
    }
    if (message.afterDrawOps !== 0) {
      obj.afterDrawOps = Math.round(message.afterDrawOps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Guess>, I>>(base?: I): Guess {
    return Guess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Guess>, I>>(object: I): Guess {
    const message = createBaseGuess();
    message.guesserId = object.guesserId ?? 0;
    message.incorrectGuess = (object.incorrectGuess !== undefined && object.incorrectGuess !== null)
      ? IncorrectGuess.fromPartial(object.incorrectGuess)
      : undefined;
    message.correctGuess = (object.correctGuess !== undefined && object.correctGuess !== null)
      ? CorrectGuess.fromPartial(object.correctGuess)
      : undefined;
    message.afterDrawOps = object.afterDrawOps ?? 0;
    return message;
  },
};

function createBaseIncorrectGuess(): IncorrectGuess {
  return { guess: "" };
}

export const IncorrectGuess: MessageFns<IncorrectGuess> = {
  encode(message: IncorrectGuess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guess !== "") {
      writer.uint32(10).string(message.guess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncorrectGuess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncorrectGuess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guess = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncorrectGuess {
    return { guess: isSet(object.guess) ? globalThis.String(object.guess) : "" };
  },

  toJSON(message: IncorrectGuess): unknown {
    const obj: any = {};
    if (message.guess !== "") {
      obj.guess = message.guess;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncorrectGuess>, I>>(base?: I): IncorrectGuess {
    return IncorrectGuess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncorrectGuess>, I>>(object: I): IncorrectGuess {
    const message = createBaseIncorrectGuess();
    message.guess = object.guess ?? "";
    return message;
  },
};

function createBaseCorrectGuess(): CorrectGuess {
  return {};
}

export const CorrectGuess: MessageFns<CorrectGuess> = {
  encode(_: CorrectGuess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CorrectGuess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCorrectGuess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CorrectGuess {
    return {};
  },

  toJSON(_: CorrectGuess): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CorrectGuess>, I>>(base?: I): CorrectGuess {
    return CorrectGuess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CorrectGuess>, I>>(_: I): CorrectGuess {
    const message = createBaseCorrectGuess();
    return message;
  },
};

function createBaseHint(): Hint {
  return { revealLength: undefined, revealLetter: undefined, afterDrawOps: 0 };
}

export const Hint: MessageFns<Hint> = {
  encode(message: Hint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.revealLength !== undefined) {
      RevealLength.encode(message.revealLength, writer.uint32(10).fork()).join();
    }
    if (message.revealLetter !== undefined) {
      RevealLetter.encode(message.revealLetter, writer.uint32(18).fork()).join();
    }
    if (message.afterDrawOps !== 0) {
      writer.uint32(24).uint32(message.afterDrawOps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.revealLength = RevealLength.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.revealLetter = RevealLetter.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.afterDrawOps = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hint {
    return {
      revealLength: isSet(object.revealLength) ? RevealLength.fromJSON(object.revealLength) : undefined,
      revealLetter: isSet(object.revealLetter) ? RevealLetter.fromJSON(object.revealLetter) : undefined,
      afterDrawOps: isSet(object.afterDrawOps) ? globalThis.Number(object.afterDrawOps) : 0,
    };
  },

  toJSON(message: Hint): unknown {
    const obj: any = {};
    if (message.revealLength !== undefined) {
      obj.revealLength = RevealLength.toJSON(message.revealLength);
    }
    if (message.revealLetter !== undefined) {
      obj.revealLetter = RevealLetter.toJSON(message.revealLetter);
    }
    if (message.afterDrawOps !== 0) {
      obj.afterDrawOps = Math.round(message.afterDrawOps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Hint>, I>>(base?: I): Hint {
    return Hint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Hint>, I>>(object: I): Hint {
    const message = createBaseHint();
    message.revealLength = (object.revealLength !== undefined && object.revealLength !== null)
      ? RevealLength.fromPartial(object.revealLength)
      : undefined;
    message.revealLetter = (object.revealLetter !== undefined && object.revealLetter !== null)
      ? RevealLetter.fromPartial(object.revealLetter)
      : undefined;
    message.afterDrawOps = object.afterDrawOps ?? 0;
    return message;
  },
};

function createBaseRevealLength(): RevealLength {
  return {};
}

export const RevealLength: MessageFns<RevealLength> = {
  encode(_: RevealLength, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevealLength {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevealLength();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RevealLength {
    return {};
  },

  toJSON(_: RevealLength): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RevealLength>, I>>(base?: I): RevealLength {
    return RevealLength.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevealLength>, I>>(_: I): RevealLength {
    const message = createBaseRevealLength();
    return message;
  },
};

function createBaseRevealLetter(): RevealLetter {
  return { index: 0 };
}

export const RevealLetter: MessageFns<RevealLetter> = {
  encode(message: RevealLetter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevealLetter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevealLetter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevealLetter {
    return { index: isSet(object.index) ? globalThis.Number(object.index) : 0 };
  },

  toJSON(message: RevealLetter): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RevealLetter>, I>>(base?: I): RevealLetter {
    return RevealLetter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevealLetter>, I>>(object: I): RevealLetter {
    const message = createBaseRevealLetter();
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseDrawOp(): DrawOp {
  return {
    setColor: undefined,
    startStroke: undefined,
    continueStroke: undefined,
    clearScreen: undefined,
    undo: undefined,
    redo: undefined,
  };
}

export const DrawOp: MessageFns<DrawOp> = {
  encode(message: DrawOp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setColor !== undefined) {
      DoSetColor.encode(message.setColor, writer.uint32(10).fork()).join();
    }
    if (message.startStroke !== undefined) {
      DoStartStroke.encode(message.startStroke, writer.uint32(18).fork()).join();
    }
    if (message.continueStroke !== undefined) {
      DoContinueStroke.encode(message.continueStroke, writer.uint32(26).fork()).join();
    }
    if (message.clearScreen !== undefined) {
      DoClearScreen.encode(message.clearScreen, writer.uint32(34).fork()).join();
    }
    if (message.undo !== undefined) {
      DoUndo.encode(message.undo, writer.uint32(42).fork()).join();
    }
    if (message.redo !== undefined) {
      DoRedo.encode(message.redo, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DrawOp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrawOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.setColor = DoSetColor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startStroke = DoStartStroke.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.continueStroke = DoContinueStroke.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clearScreen = DoClearScreen.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.undo = DoUndo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.redo = DoRedo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrawOp {
    return {
      setColor: isSet(object.setColor) ? DoSetColor.fromJSON(object.setColor) : undefined,
      startStroke: isSet(object.startStroke) ? DoStartStroke.fromJSON(object.startStroke) : undefined,
      continueStroke: isSet(object.continueStroke) ? DoContinueStroke.fromJSON(object.continueStroke) : undefined,
      clearScreen: isSet(object.clearScreen) ? DoClearScreen.fromJSON(object.clearScreen) : undefined,
      undo: isSet(object.undo) ? DoUndo.fromJSON(object.undo) : undefined,
      redo: isSet(object.redo) ? DoRedo.fromJSON(object.redo) : undefined,
    };
  },

  toJSON(message: DrawOp): unknown {
    const obj: any = {};
    if (message.setColor !== undefined) {
      obj.setColor = DoSetColor.toJSON(message.setColor);
    }
    if (message.startStroke !== undefined) {
      obj.startStroke = DoStartStroke.toJSON(message.startStroke);
    }
    if (message.continueStroke !== undefined) {
      obj.continueStroke = DoContinueStroke.toJSON(message.continueStroke);
    }
    if (message.clearScreen !== undefined) {
      obj.clearScreen = DoClearScreen.toJSON(message.clearScreen);
    }
    if (message.undo !== undefined) {
      obj.undo = DoUndo.toJSON(message.undo);
    }
    if (message.redo !== undefined) {
      obj.redo = DoRedo.toJSON(message.redo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrawOp>, I>>(base?: I): DrawOp {
    return DrawOp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrawOp>, I>>(object: I): DrawOp {
    const message = createBaseDrawOp();
    message.setColor = (object.setColor !== undefined && object.setColor !== null)
      ? DoSetColor.fromPartial(object.setColor)
      : undefined;
    message.startStroke = (object.startStroke !== undefined && object.startStroke !== null)
      ? DoStartStroke.fromPartial(object.startStroke)
      : undefined;
    message.continueStroke = (object.continueStroke !== undefined && object.continueStroke !== null)
      ? DoContinueStroke.fromPartial(object.continueStroke)
      : undefined;
    message.clearScreen = (object.clearScreen !== undefined && object.clearScreen !== null)
      ? DoClearScreen.fromPartial(object.clearScreen)
      : undefined;
    message.undo = (object.undo !== undefined && object.undo !== null) ? DoUndo.fromPartial(object.undo) : undefined;
    message.redo = (object.redo !== undefined && object.redo !== null) ? DoRedo.fromPartial(object.redo) : undefined;
    return message;
  },
};

function createBaseDoSetColor(): DoSetColor {
  return { colorType: 0, color: "" };
}

export const DoSetColor: MessageFns<DoSetColor> = {
  encode(message: DoSetColor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colorType !== 0) {
      writer.uint32(8).int32(message.colorType);
    }
    if (message.color !== "") {
      writer.uint32(18).string(message.color);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoSetColor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoSetColor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.colorType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.color = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoSetColor {
    return {
      colorType: isSet(object.colorType) ? colorTypeFromJSON(object.colorType) : 0,
      color: isSet(object.color) ? globalThis.String(object.color) : "",
    };
  },

  toJSON(message: DoSetColor): unknown {
    const obj: any = {};
    if (message.colorType !== 0) {
      obj.colorType = colorTypeToJSON(message.colorType);
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DoSetColor>, I>>(base?: I): DoSetColor {
    return DoSetColor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoSetColor>, I>>(object: I): DoSetColor {
    const message = createBaseDoSetColor();
    message.colorType = object.colorType ?? 0;
    message.color = object.color ?? "";
    return message;
  },
};

function createBaseDoStartStroke(): DoStartStroke {
  return { colorType: 0, x: 0, y: 0 };
}

export const DoStartStroke: MessageFns<DoStartStroke> = {
  encode(message: DoStartStroke, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colorType !== 0) {
      writer.uint32(8).int32(message.colorType);
    }
    if (message.x !== 0) {
      writer.uint32(21).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(29).float(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoStartStroke {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoStartStroke();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.colorType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.y = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoStartStroke {
    return {
      colorType: isSet(object.colorType) ? colorTypeFromJSON(object.colorType) : 0,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: DoStartStroke): unknown {
    const obj: any = {};
    if (message.colorType !== 0) {
      obj.colorType = colorTypeToJSON(message.colorType);
    }
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DoStartStroke>, I>>(base?: I): DoStartStroke {
    return DoStartStroke.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoStartStroke>, I>>(object: I): DoStartStroke {
    const message = createBaseDoStartStroke();
    message.colorType = object.colorType ?? 0;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseDoContinueStroke(): DoContinueStroke {
  return { x: 0, y: 0 };
}

export const DoContinueStroke: MessageFns<DoContinueStroke> = {
  encode(message: DoContinueStroke, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoContinueStroke {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoContinueStroke();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoContinueStroke {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: DoContinueStroke): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DoContinueStroke>, I>>(base?: I): DoContinueStroke {
    return DoContinueStroke.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoContinueStroke>, I>>(object: I): DoContinueStroke {
    const message = createBaseDoContinueStroke();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseDoClearScreen(): DoClearScreen {
  return {};
}

export const DoClearScreen: MessageFns<DoClearScreen> = {
  encode(_: DoClearScreen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoClearScreen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoClearScreen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DoClearScreen {
    return {};
  },

  toJSON(_: DoClearScreen): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DoClearScreen>, I>>(base?: I): DoClearScreen {
    return DoClearScreen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoClearScreen>, I>>(_: I): DoClearScreen {
    const message = createBaseDoClearScreen();
    return message;
  },
};

function createBaseDoUndo(): DoUndo {
  return {};
}

export const DoUndo: MessageFns<DoUndo> = {
  encode(_: DoUndo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoUndo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoUndo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DoUndo {
    return {};
  },

  toJSON(_: DoUndo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DoUndo>, I>>(base?: I): DoUndo {
    return DoUndo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoUndo>, I>>(_: I): DoUndo {
    const message = createBaseDoUndo();
    return message;
  },
};

function createBaseDoRedo(): DoRedo {
  return {};
}

export const DoRedo: MessageFns<DoRedo> = {
  encode(_: DoRedo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoRedo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoRedo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DoRedo {
    return {};
  },

  toJSON(_: DoRedo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DoRedo>, I>>(base?: I): DoRedo {
    return DoRedo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoRedo>, I>>(_: I): DoRedo {
    const message = createBaseDoRedo();
    return message;
  },
};

function createBaseSeSetGame(): SeSetGame {
  return { playerId: 0, game: undefined };
}

export const SeSetGame: MessageFns<SeSetGame> = {
  encode(message: SeSetGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.game !== undefined) {
      Game.encode(message.game, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeSetGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeSetGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.game = Game.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeSetGame {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      game: isSet(object.game) ? Game.fromJSON(object.game) : undefined,
    };
  },

  toJSON(message: SeSetGame): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.game !== undefined) {
      obj.game = Game.toJSON(message.game);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeSetGame>, I>>(base?: I): SeSetGame {
    return SeSetGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeSetGame>, I>>(object: I): SeSetGame {
    const message = createBaseSeSetGame();
    message.playerId = object.playerId ?? 0;
    message.game = (object.game !== undefined && object.game !== null) ? Game.fromPartial(object.game) : undefined;
    return message;
  },
};

function createBaseSeError(): SeError {
  return { seErrorType: 0, message: "" };
}

export const SeError: MessageFns<SeError> = {
  encode(message: SeError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seErrorType !== 0) {
      writer.uint32(8).int32(message.seErrorType);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seErrorType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeError {
    return {
      seErrorType: isSet(object.seErrorType) ? seErrorTypeFromJSON(object.seErrorType) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SeError): unknown {
    const obj: any = {};
    if (message.seErrorType !== 0) {
      obj.seErrorType = seErrorTypeToJSON(message.seErrorType);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeError>, I>>(base?: I): SeError {
    return SeError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeError>, I>>(object: I): SeError {
    const message = createBaseSeError();
    message.seErrorType = object.seErrorType ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSePlayerJoin(): SePlayerJoin {
  return { playerId: 0, name: "" };
}

export const SePlayerJoin: MessageFns<SePlayerJoin> = {
  encode(message: SePlayerJoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerJoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerJoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerJoin {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: SePlayerJoin): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerJoin>, I>>(base?: I): SePlayerJoin {
    return SePlayerJoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerJoin>, I>>(object: I): SePlayerJoin {
    const message = createBaseSePlayerJoin();
    message.playerId = object.playerId ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSePlayerLeave(): SePlayerLeave {
  return { playerId: 0 };
}

export const SePlayerLeave: MessageFns<SePlayerLeave> = {
  encode(message: SePlayerLeave, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerLeave {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerLeave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerLeave {
    return { playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0 };
  },

  toJSON(message: SePlayerLeave): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerLeave>, I>>(base?: I): SePlayerLeave {
    return SePlayerLeave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerLeave>, I>>(object: I): SePlayerLeave {
    const message = createBaseSePlayerLeave();
    message.playerId = object.playerId ?? 0;
    return message;
  },
};

function createBaseSePlayerConnect(): SePlayerConnect {
  return { playerId: 0 };
}

export const SePlayerConnect: MessageFns<SePlayerConnect> = {
  encode(message: SePlayerConnect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerConnect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerConnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerConnect {
    return { playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0 };
  },

  toJSON(message: SePlayerConnect): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerConnect>, I>>(base?: I): SePlayerConnect {
    return SePlayerConnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerConnect>, I>>(object: I): SePlayerConnect {
    const message = createBaseSePlayerConnect();
    message.playerId = object.playerId ?? 0;
    return message;
  },
};

function createBaseSePlayerDisconnect(): SePlayerDisconnect {
  return { playerId: 0 };
}

export const SePlayerDisconnect: MessageFns<SePlayerDisconnect> = {
  encode(message: SePlayerDisconnect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerDisconnect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerDisconnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerDisconnect {
    return { playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0 };
  },

  toJSON(message: SePlayerDisconnect): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerDisconnect>, I>>(base?: I): SePlayerDisconnect {
    return SePlayerDisconnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerDisconnect>, I>>(object: I): SePlayerDisconnect {
    const message = createBaseSePlayerDisconnect();
    message.playerId = object.playerId ?? 0;
    return message;
  },
};

function createBaseSePlayerRename(): SePlayerRename {
  return { playerId: 0, name: "" };
}

export const SePlayerRename: MessageFns<SePlayerRename> = {
  encode(message: SePlayerRename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerRename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerRename {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: SePlayerRename): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerRename>, I>>(base?: I): SePlayerRename {
    return SePlayerRename.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerRename>, I>>(object: I): SePlayerRename {
    const message = createBaseSePlayerRename();
    message.playerId = object.playerId ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSePlayerIncRoundScore(): SePlayerIncRoundScore {
  return { playerId: 0, incBy: 0 };
}

export const SePlayerIncRoundScore: MessageFns<SePlayerIncRoundScore> = {
  encode(message: SePlayerIncRoundScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.incBy !== 0) {
      writer.uint32(16).uint32(message.incBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerIncRoundScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerIncRoundScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.incBy = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerIncRoundScore {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      incBy: isSet(object.incBy) ? globalThis.Number(object.incBy) : 0,
    };
  },

  toJSON(message: SePlayerIncRoundScore): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.incBy !== 0) {
      obj.incBy = Math.round(message.incBy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerIncRoundScore>, I>>(base?: I): SePlayerIncRoundScore {
    return SePlayerIncRoundScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerIncRoundScore>, I>>(object: I): SePlayerIncRoundScore {
    const message = createBaseSePlayerIncRoundScore();
    message.playerId = object.playerId ?? 0;
    message.incBy = object.incBy ?? 0;
    return message;
  },
};

function createBaseSePlayerIncDrawScore(): SePlayerIncDrawScore {
  return { drawerId: 0, incBy: 0 };
}

export const SePlayerIncDrawScore: MessageFns<SePlayerIncDrawScore> = {
  encode(message: SePlayerIncDrawScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.drawerId !== 0) {
      writer.uint32(8).uint32(message.drawerId);
    }
    if (message.incBy !== 0) {
      writer.uint32(16).uint32(message.incBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerIncDrawScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerIncDrawScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.drawerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.incBy = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerIncDrawScore {
    return {
      drawerId: isSet(object.drawerId) ? globalThis.Number(object.drawerId) : 0,
      incBy: isSet(object.incBy) ? globalThis.Number(object.incBy) : 0,
    };
  },

  toJSON(message: SePlayerIncDrawScore): unknown {
    const obj: any = {};
    if (message.drawerId !== 0) {
      obj.drawerId = Math.round(message.drawerId);
    }
    if (message.incBy !== 0) {
      obj.incBy = Math.round(message.incBy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerIncDrawScore>, I>>(base?: I): SePlayerIncDrawScore {
    return SePlayerIncDrawScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerIncDrawScore>, I>>(object: I): SePlayerIncDrawScore {
    const message = createBaseSePlayerIncDrawScore();
    message.drawerId = object.drawerId ?? 0;
    message.incBy = object.incBy ?? 0;
    return message;
  },
};

function createBaseSePlayerIncGuessScore(): SePlayerIncGuessScore {
  return { guesserId: 0, incBy: 0 };
}

export const SePlayerIncGuessScore: MessageFns<SePlayerIncGuessScore> = {
  encode(message: SePlayerIncGuessScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guesserId !== 0) {
      writer.uint32(8).uint32(message.guesserId);
    }
    if (message.incBy !== 0) {
      writer.uint32(16).uint32(message.incBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerIncGuessScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerIncGuessScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.guesserId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.incBy = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerIncGuessScore {
    return {
      guesserId: isSet(object.guesserId) ? globalThis.Number(object.guesserId) : 0,
      incBy: isSet(object.incBy) ? globalThis.Number(object.incBy) : 0,
    };
  },

  toJSON(message: SePlayerIncGuessScore): unknown {
    const obj: any = {};
    if (message.guesserId !== 0) {
      obj.guesserId = Math.round(message.guesserId);
    }
    if (message.incBy !== 0) {
      obj.incBy = Math.round(message.incBy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerIncGuessScore>, I>>(base?: I): SePlayerIncGuessScore {
    return SePlayerIncGuessScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerIncGuessScore>, I>>(object: I): SePlayerIncGuessScore {
    const message = createBaseSePlayerIncGuessScore();
    message.guesserId = object.guesserId ?? 0;
    message.incBy = object.incBy ?? 0;
    return message;
  },
};

function createBaseSeRoundIncDrawScore(): SeRoundIncDrawScore {
  return { incBy: 0 };
}

export const SeRoundIncDrawScore: MessageFns<SeRoundIncDrawScore> = {
  encode(message: SeRoundIncDrawScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.incBy !== 0) {
      writer.uint32(8).uint32(message.incBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeRoundIncDrawScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeRoundIncDrawScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.incBy = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeRoundIncDrawScore {
    return { incBy: isSet(object.incBy) ? globalThis.Number(object.incBy) : 0 };
  },

  toJSON(message: SeRoundIncDrawScore): unknown {
    const obj: any = {};
    if (message.incBy !== 0) {
      obj.incBy = Math.round(message.incBy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeRoundIncDrawScore>, I>>(base?: I): SeRoundIncDrawScore {
    return SeRoundIncDrawScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeRoundIncDrawScore>, I>>(object: I): SeRoundIncDrawScore {
    const message = createBaseSeRoundIncDrawScore();
    message.incBy = object.incBy ?? 0;
    return message;
  },
};

function createBaseSeRoundIncGuessScore(): SeRoundIncGuessScore {
  return { incBy: 0 };
}

export const SeRoundIncGuessScore: MessageFns<SeRoundIncGuessScore> = {
  encode(message: SeRoundIncGuessScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.incBy !== 0) {
      writer.uint32(8).uint32(message.incBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeRoundIncGuessScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeRoundIncGuessScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.incBy = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeRoundIncGuessScore {
    return { incBy: isSet(object.incBy) ? globalThis.Number(object.incBy) : 0 };
  },

  toJSON(message: SeRoundIncGuessScore): unknown {
    const obj: any = {};
    if (message.incBy !== 0) {
      obj.incBy = Math.round(message.incBy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeRoundIncGuessScore>, I>>(base?: I): SeRoundIncGuessScore {
    return SeRoundIncGuessScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeRoundIncGuessScore>, I>>(object: I): SeRoundIncGuessScore {
    const message = createBaseSeRoundIncGuessScore();
    message.incBy = object.incBy ?? 0;
    return message;
  },
};

function createBaseSePlayerDrawOp(): SePlayerDrawOp {
  return { drawerId: 0, drawOp: undefined };
}

export const SePlayerDrawOp: MessageFns<SePlayerDrawOp> = {
  encode(message: SePlayerDrawOp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.drawerId !== 0) {
      writer.uint32(8).uint32(message.drawerId);
    }
    if (message.drawOp !== undefined) {
      DrawOp.encode(message.drawOp, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerDrawOp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerDrawOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.drawerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.drawOp = DrawOp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerDrawOp {
    return {
      drawerId: isSet(object.drawerId) ? globalThis.Number(object.drawerId) : 0,
      drawOp: isSet(object.drawOp) ? DrawOp.fromJSON(object.drawOp) : undefined,
    };
  },

  toJSON(message: SePlayerDrawOp): unknown {
    const obj: any = {};
    if (message.drawerId !== 0) {
      obj.drawerId = Math.round(message.drawerId);
    }
    if (message.drawOp !== undefined) {
      obj.drawOp = DrawOp.toJSON(message.drawOp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerDrawOp>, I>>(base?: I): SePlayerDrawOp {
    return SePlayerDrawOp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerDrawOp>, I>>(object: I): SePlayerDrawOp {
    const message = createBaseSePlayerDrawOp();
    message.drawerId = object.drawerId ?? 0;
    message.drawOp = (object.drawOp !== undefined && object.drawOp !== null)
      ? DrawOp.fromPartial(object.drawOp)
      : undefined;
    return message;
  },
};

function createBaseSeRoundNew(): SeRoundNew {
  return { roundId: 0, drawerId: 0, easyWord: 0, hardWord: 0, startingPhase: 0, phaseEndsAt: 0 };
}

export const SeRoundNew: MessageFns<SeRoundNew> = {
  encode(message: SeRoundNew, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roundId !== 0) {
      writer.uint32(8).uint32(message.roundId);
    }
    if (message.drawerId !== 0) {
      writer.uint32(16).uint32(message.drawerId);
    }
    if (message.easyWord !== 0) {
      writer.uint32(24).uint32(message.easyWord);
    }
    if (message.hardWord !== 0) {
      writer.uint32(32).uint32(message.hardWord);
    }
    if (message.startingPhase !== 0) {
      writer.uint32(40).int32(message.startingPhase);
    }
    if (message.phaseEndsAt !== 0) {
      writer.uint32(48).uint64(message.phaseEndsAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeRoundNew {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeRoundNew();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roundId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.drawerId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.easyWord = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hardWord = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startingPhase = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.phaseEndsAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeRoundNew {
    return {
      roundId: isSet(object.roundId) ? globalThis.Number(object.roundId) : 0,
      drawerId: isSet(object.drawerId) ? globalThis.Number(object.drawerId) : 0,
      easyWord: isSet(object.easyWord) ? globalThis.Number(object.easyWord) : 0,
      hardWord: isSet(object.hardWord) ? globalThis.Number(object.hardWord) : 0,
      startingPhase: isSet(object.startingPhase) ? phaseFromJSON(object.startingPhase) : 0,
      phaseEndsAt: isSet(object.phaseEndsAt) ? globalThis.Number(object.phaseEndsAt) : 0,
    };
  },

  toJSON(message: SeRoundNew): unknown {
    const obj: any = {};
    if (message.roundId !== 0) {
      obj.roundId = Math.round(message.roundId);
    }
    if (message.drawerId !== 0) {
      obj.drawerId = Math.round(message.drawerId);
    }
    if (message.easyWord !== 0) {
      obj.easyWord = Math.round(message.easyWord);
    }
    if (message.hardWord !== 0) {
      obj.hardWord = Math.round(message.hardWord);
    }
    if (message.startingPhase !== 0) {
      obj.startingPhase = phaseToJSON(message.startingPhase);
    }
    if (message.phaseEndsAt !== 0) {
      obj.phaseEndsAt = Math.round(message.phaseEndsAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeRoundNew>, I>>(base?: I): SeRoundNew {
    return SeRoundNew.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeRoundNew>, I>>(object: I): SeRoundNew {
    const message = createBaseSeRoundNew();
    message.roundId = object.roundId ?? 0;
    message.drawerId = object.drawerId ?? 0;
    message.easyWord = object.easyWord ?? 0;
    message.hardWord = object.hardWord ?? 0;
    message.startingPhase = object.startingPhase ?? 0;
    message.phaseEndsAt = object.phaseEndsAt ?? 0;
    return message;
  },
};

function createBaseSeRoundChangePhase(): SeRoundChangePhase {
  return { phase: 0, phaseEndsAt: 0 };
}

export const SeRoundChangePhase: MessageFns<SeRoundChangePhase> = {
  encode(message: SeRoundChangePhase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phase !== 0) {
      writer.uint32(8).int32(message.phase);
    }
    if (message.phaseEndsAt !== 0) {
      writer.uint32(16).uint64(message.phaseEndsAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeRoundChangePhase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeRoundChangePhase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.phase = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.phaseEndsAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeRoundChangePhase {
    return {
      phase: isSet(object.phase) ? phaseFromJSON(object.phase) : 0,
      phaseEndsAt: isSet(object.phaseEndsAt) ? globalThis.Number(object.phaseEndsAt) : 0,
    };
  },

  toJSON(message: SeRoundChangePhase): unknown {
    const obj: any = {};
    if (message.phase !== 0) {
      obj.phase = phaseToJSON(message.phase);
    }
    if (message.phaseEndsAt !== 0) {
      obj.phaseEndsAt = Math.round(message.phaseEndsAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SeRoundChangePhase>, I>>(base?: I): SeRoundChangePhase {
    return SeRoundChangePhase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SeRoundChangePhase>, I>>(object: I): SeRoundChangePhase {
    const message = createBaseSeRoundChangePhase();
    message.phase = object.phase ?? 0;
    message.phaseEndsAt = object.phaseEndsAt ?? 0;
    return message;
  },
};

function createBaseSePlayerChooseWord(): SePlayerChooseWord {
  return { drawerId: 0, choice: 0 };
}

export const SePlayerChooseWord: MessageFns<SePlayerChooseWord> = {
  encode(message: SePlayerChooseWord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.drawerId !== 0) {
      writer.uint32(8).uint32(message.drawerId);
    }
    if (message.choice !== 0) {
      writer.uint32(16).int32(message.choice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerChooseWord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerChooseWord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.drawerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.choice = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerChooseWord {
    return {
      drawerId: isSet(object.drawerId) ? globalThis.Number(object.drawerId) : 0,
      choice: isSet(object.choice) ? wordChoiceFromJSON(object.choice) : 0,
    };
  },

  toJSON(message: SePlayerChooseWord): unknown {
    const obj: any = {};
    if (message.drawerId !== 0) {
      obj.drawerId = Math.round(message.drawerId);
    }
    if (message.choice !== 0) {
      obj.choice = wordChoiceToJSON(message.choice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerChooseWord>, I>>(base?: I): SePlayerChooseWord {
    return SePlayerChooseWord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerChooseWord>, I>>(object: I): SePlayerChooseWord {
    const message = createBaseSePlayerChooseWord();
    message.drawerId = object.drawerId ?? 0;
    message.choice = object.choice ?? 0;
    return message;
  },
};

function createBaseSePlayerGuessWord(): SePlayerGuessWord {
  return { guesserId: 0, guess: "", afterDrawOps: 0 };
}

export const SePlayerGuessWord: MessageFns<SePlayerGuessWord> = {
  encode(message: SePlayerGuessWord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guesserId !== 0) {
      writer.uint32(8).uint32(message.guesserId);
    }
    if (message.guess !== "") {
      writer.uint32(18).string(message.guess);
    }
    if (message.afterDrawOps !== 0) {
      writer.uint32(24).uint32(message.afterDrawOps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerGuessWord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerGuessWord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.guesserId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.guess = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.afterDrawOps = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerGuessWord {
    return {
      guesserId: isSet(object.guesserId) ? globalThis.Number(object.guesserId) : 0,
      guess: isSet(object.guess) ? globalThis.String(object.guess) : "",
      afterDrawOps: isSet(object.afterDrawOps) ? globalThis.Number(object.afterDrawOps) : 0,
    };
  },

  toJSON(message: SePlayerGuessWord): unknown {
    const obj: any = {};
    if (message.guesserId !== 0) {
      obj.guesserId = Math.round(message.guesserId);
    }
    if (message.guess !== "") {
      obj.guess = message.guess;
    }
    if (message.afterDrawOps !== 0) {
      obj.afterDrawOps = Math.round(message.afterDrawOps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerGuessWord>, I>>(base?: I): SePlayerGuessWord {
    return SePlayerGuessWord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerGuessWord>, I>>(object: I): SePlayerGuessWord {
    const message = createBaseSePlayerGuessWord();
    message.guesserId = object.guesserId ?? 0;
    message.guess = object.guess ?? "";
    message.afterDrawOps = object.afterDrawOps ?? 0;
    return message;
  },
};

function createBaseSePlayerLikeRound(): SePlayerLikeRound {
  return { playerId: 0, roundId: 0 };
}

export const SePlayerLikeRound: MessageFns<SePlayerLikeRound> = {
  encode(message: SePlayerLikeRound, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.roundId !== 0) {
      writer.uint32(16).uint32(message.roundId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SePlayerLikeRound {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSePlayerLikeRound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.roundId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SePlayerLikeRound {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      roundId: isSet(object.roundId) ? globalThis.Number(object.roundId) : 0,
    };
  },

  toJSON(message: SePlayerLikeRound): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.roundId !== 0) {
      obj.roundId = Math.round(message.roundId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SePlayerLikeRound>, I>>(base?: I): SePlayerLikeRound {
    return SePlayerLikeRound.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SePlayerLikeRound>, I>>(object: I): SePlayerLikeRound {
    const message = createBaseSePlayerLikeRound();
    message.playerId = object.playerId ?? 0;
    message.roundId = object.roundId ?? 0;
    return message;
  },
};

function createBaseServerEvent(): ServerEvent {
  return {
    playerJoin: undefined,
    playerLeave: undefined,
    playerRename: undefined,
    playerIncRoundScore: undefined,
    playerIncDrawScore: undefined,
    playerIncGuessScore: undefined,
    setGame: undefined,
    error: undefined,
    playerConnect: undefined,
    playerDisconnect: undefined,
    playerDrawOp: undefined,
    newRound: undefined,
    playerChooseWord: undefined,
    playerGuessWord: undefined,
    playerLikeRound: undefined,
    roundIncDrawScore: undefined,
    roundIncGuessScore: undefined,
    roundChangePhase: undefined,
  };
}

export const ServerEvent: MessageFns<ServerEvent> = {
  encode(message: ServerEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerJoin !== undefined) {
      SePlayerJoin.encode(message.playerJoin, writer.uint32(10).fork()).join();
    }
    if (message.playerLeave !== undefined) {
      SePlayerLeave.encode(message.playerLeave, writer.uint32(18).fork()).join();
    }
    if (message.playerRename !== undefined) {
      SePlayerRename.encode(message.playerRename, writer.uint32(26).fork()).join();
    }
    if (message.playerIncRoundScore !== undefined) {
      SePlayerIncRoundScore.encode(message.playerIncRoundScore, writer.uint32(34).fork()).join();
    }
    if (message.playerIncDrawScore !== undefined) {
      SePlayerIncDrawScore.encode(message.playerIncDrawScore, writer.uint32(82).fork()).join();
    }
    if (message.playerIncGuessScore !== undefined) {
      SePlayerIncGuessScore.encode(message.playerIncGuessScore, writer.uint32(90).fork()).join();
    }
    if (message.setGame !== undefined) {
      SeSetGame.encode(message.setGame, writer.uint32(42).fork()).join();
    }
    if (message.error !== undefined) {
      SeError.encode(message.error, writer.uint32(50).fork()).join();
    }
    if (message.playerConnect !== undefined) {
      SePlayerConnect.encode(message.playerConnect, writer.uint32(58).fork()).join();
    }
    if (message.playerDisconnect !== undefined) {
      SePlayerDisconnect.encode(message.playerDisconnect, writer.uint32(66).fork()).join();
    }
    if (message.playerDrawOp !== undefined) {
      SePlayerDrawOp.encode(message.playerDrawOp, writer.uint32(74).fork()).join();
    }
    if (message.newRound !== undefined) {
      SeRoundNew.encode(message.newRound, writer.uint32(98).fork()).join();
    }
    if (message.playerChooseWord !== undefined) {
      SePlayerChooseWord.encode(message.playerChooseWord, writer.uint32(106).fork()).join();
    }
    if (message.playerGuessWord !== undefined) {
      SePlayerGuessWord.encode(message.playerGuessWord, writer.uint32(114).fork()).join();
    }
    if (message.playerLikeRound !== undefined) {
      SePlayerLikeRound.encode(message.playerLikeRound, writer.uint32(122).fork()).join();
    }
    if (message.roundIncDrawScore !== undefined) {
      SeRoundIncDrawScore.encode(message.roundIncDrawScore, writer.uint32(130).fork()).join();
    }
    if (message.roundIncGuessScore !== undefined) {
      SeRoundIncGuessScore.encode(message.roundIncGuessScore, writer.uint32(138).fork()).join();
    }
    if (message.roundChangePhase !== undefined) {
      SeRoundChangePhase.encode(message.roundChangePhase, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerJoin = SePlayerJoin.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerLeave = SePlayerLeave.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerRename = SePlayerRename.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playerIncRoundScore = SePlayerIncRoundScore.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.playerIncDrawScore = SePlayerIncDrawScore.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.playerIncGuessScore = SePlayerIncGuessScore.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.setGame = SeSetGame.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.error = SeError.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.playerConnect = SePlayerConnect.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.playerDisconnect = SePlayerDisconnect.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.playerDrawOp = SePlayerDrawOp.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.newRound = SeRoundNew.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.playerChooseWord = SePlayerChooseWord.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.playerGuessWord = SePlayerGuessWord.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.playerLikeRound = SePlayerLikeRound.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.roundIncDrawScore = SeRoundIncDrawScore.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.roundIncGuessScore = SeRoundIncGuessScore.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.roundChangePhase = SeRoundChangePhase.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent {
    return {
      playerJoin: isSet(object.playerJoin) ? SePlayerJoin.fromJSON(object.playerJoin) : undefined,
      playerLeave: isSet(object.playerLeave) ? SePlayerLeave.fromJSON(object.playerLeave) : undefined,
      playerRename: isSet(object.playerRename) ? SePlayerRename.fromJSON(object.playerRename) : undefined,
      playerIncRoundScore: isSet(object.playerIncRoundScore)
        ? SePlayerIncRoundScore.fromJSON(object.playerIncRoundScore)
        : undefined,
      playerIncDrawScore: isSet(object.playerIncDrawScore)
        ? SePlayerIncDrawScore.fromJSON(object.playerIncDrawScore)
        : undefined,
      playerIncGuessScore: isSet(object.playerIncGuessScore)
        ? SePlayerIncGuessScore.fromJSON(object.playerIncGuessScore)
        : undefined,
      setGame: isSet(object.setGame) ? SeSetGame.fromJSON(object.setGame) : undefined,
      error: isSet(object.error) ? SeError.fromJSON(object.error) : undefined,
      playerConnect: isSet(object.playerConnect) ? SePlayerConnect.fromJSON(object.playerConnect) : undefined,
      playerDisconnect: isSet(object.playerDisconnect)
        ? SePlayerDisconnect.fromJSON(object.playerDisconnect)
        : undefined,
      playerDrawOp: isSet(object.playerDrawOp) ? SePlayerDrawOp.fromJSON(object.playerDrawOp) : undefined,
      newRound: isSet(object.newRound) ? SeRoundNew.fromJSON(object.newRound) : undefined,
      playerChooseWord: isSet(object.playerChooseWord)
        ? SePlayerChooseWord.fromJSON(object.playerChooseWord)
        : undefined,
      playerGuessWord: isSet(object.playerGuessWord) ? SePlayerGuessWord.fromJSON(object.playerGuessWord) : undefined,
      playerLikeRound: isSet(object.playerLikeRound) ? SePlayerLikeRound.fromJSON(object.playerLikeRound) : undefined,
      roundIncDrawScore: isSet(object.roundIncDrawScore)
        ? SeRoundIncDrawScore.fromJSON(object.roundIncDrawScore)
        : undefined,
      roundIncGuessScore: isSet(object.roundIncGuessScore)
        ? SeRoundIncGuessScore.fromJSON(object.roundIncGuessScore)
        : undefined,
      roundChangePhase: isSet(object.roundChangePhase)
        ? SeRoundChangePhase.fromJSON(object.roundChangePhase)
        : undefined,
    };
  },

  toJSON(message: ServerEvent): unknown {
    const obj: any = {};
    if (message.playerJoin !== undefined) {
      obj.playerJoin = SePlayerJoin.toJSON(message.playerJoin);
    }
    if (message.playerLeave !== undefined) {
      obj.playerLeave = SePlayerLeave.toJSON(message.playerLeave);
    }
    if (message.playerRename !== undefined) {
      obj.playerRename = SePlayerRename.toJSON(message.playerRename);
    }
    if (message.playerIncRoundScore !== undefined) {
      obj.playerIncRoundScore = SePlayerIncRoundScore.toJSON(message.playerIncRoundScore);
    }
    if (message.playerIncDrawScore !== undefined) {
      obj.playerIncDrawScore = SePlayerIncDrawScore.toJSON(message.playerIncDrawScore);
    }
    if (message.playerIncGuessScore !== undefined) {
      obj.playerIncGuessScore = SePlayerIncGuessScore.toJSON(message.playerIncGuessScore);
    }
    if (message.setGame !== undefined) {
      obj.setGame = SeSetGame.toJSON(message.setGame);
    }
    if (message.error !== undefined) {
      obj.error = SeError.toJSON(message.error);
    }
    if (message.playerConnect !== undefined) {
      obj.playerConnect = SePlayerConnect.toJSON(message.playerConnect);
    }
    if (message.playerDisconnect !== undefined) {
      obj.playerDisconnect = SePlayerDisconnect.toJSON(message.playerDisconnect);
    }
    if (message.playerDrawOp !== undefined) {
      obj.playerDrawOp = SePlayerDrawOp.toJSON(message.playerDrawOp);
    }
    if (message.newRound !== undefined) {
      obj.newRound = SeRoundNew.toJSON(message.newRound);
    }
    if (message.playerChooseWord !== undefined) {
      obj.playerChooseWord = SePlayerChooseWord.toJSON(message.playerChooseWord);
    }
    if (message.playerGuessWord !== undefined) {
      obj.playerGuessWord = SePlayerGuessWord.toJSON(message.playerGuessWord);
    }
    if (message.playerLikeRound !== undefined) {
      obj.playerLikeRound = SePlayerLikeRound.toJSON(message.playerLikeRound);
    }
    if (message.roundIncDrawScore !== undefined) {
      obj.roundIncDrawScore = SeRoundIncDrawScore.toJSON(message.roundIncDrawScore);
    }
    if (message.roundIncGuessScore !== undefined) {
      obj.roundIncGuessScore = SeRoundIncGuessScore.toJSON(message.roundIncGuessScore);
    }
    if (message.roundChangePhase !== undefined) {
      obj.roundChangePhase = SeRoundChangePhase.toJSON(message.roundChangePhase);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent>, I>>(base?: I): ServerEvent {
    return ServerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent>, I>>(object: I): ServerEvent {
    const message = createBaseServerEvent();
    message.playerJoin = (object.playerJoin !== undefined && object.playerJoin !== null)
      ? SePlayerJoin.fromPartial(object.playerJoin)
      : undefined;
    message.playerLeave = (object.playerLeave !== undefined && object.playerLeave !== null)
      ? SePlayerLeave.fromPartial(object.playerLeave)
      : undefined;
    message.playerRename = (object.playerRename !== undefined && object.playerRename !== null)
      ? SePlayerRename.fromPartial(object.playerRename)
      : undefined;
    message.playerIncRoundScore = (object.playerIncRoundScore !== undefined && object.playerIncRoundScore !== null)
      ? SePlayerIncRoundScore.fromPartial(object.playerIncRoundScore)
      : undefined;
    message.playerIncDrawScore = (object.playerIncDrawScore !== undefined && object.playerIncDrawScore !== null)
      ? SePlayerIncDrawScore.fromPartial(object.playerIncDrawScore)
      : undefined;
    message.playerIncGuessScore = (object.playerIncGuessScore !== undefined && object.playerIncGuessScore !== null)
      ? SePlayerIncGuessScore.fromPartial(object.playerIncGuessScore)
      : undefined;
    message.setGame = (object.setGame !== undefined && object.setGame !== null)
      ? SeSetGame.fromPartial(object.setGame)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? SeError.fromPartial(object.error)
      : undefined;
    message.playerConnect = (object.playerConnect !== undefined && object.playerConnect !== null)
      ? SePlayerConnect.fromPartial(object.playerConnect)
      : undefined;
    message.playerDisconnect = (object.playerDisconnect !== undefined && object.playerDisconnect !== null)
      ? SePlayerDisconnect.fromPartial(object.playerDisconnect)
      : undefined;
    message.playerDrawOp = (object.playerDrawOp !== undefined && object.playerDrawOp !== null)
      ? SePlayerDrawOp.fromPartial(object.playerDrawOp)
      : undefined;
    message.newRound = (object.newRound !== undefined && object.newRound !== null)
      ? SeRoundNew.fromPartial(object.newRound)
      : undefined;
    message.playerChooseWord = (object.playerChooseWord !== undefined && object.playerChooseWord !== null)
      ? SePlayerChooseWord.fromPartial(object.playerChooseWord)
      : undefined;
    message.playerGuessWord = (object.playerGuessWord !== undefined && object.playerGuessWord !== null)
      ? SePlayerGuessWord.fromPartial(object.playerGuessWord)
      : undefined;
    message.playerLikeRound = (object.playerLikeRound !== undefined && object.playerLikeRound !== null)
      ? SePlayerLikeRound.fromPartial(object.playerLikeRound)
      : undefined;
    message.roundIncDrawScore = (object.roundIncDrawScore !== undefined && object.roundIncDrawScore !== null)
      ? SeRoundIncDrawScore.fromPartial(object.roundIncDrawScore)
      : undefined;
    message.roundIncGuessScore = (object.roundIncGuessScore !== undefined && object.roundIncGuessScore !== null)
      ? SeRoundIncGuessScore.fromPartial(object.roundIncGuessScore)
      : undefined;
    message.roundChangePhase = (object.roundChangePhase !== undefined && object.roundChangePhase !== null)
      ? SeRoundChangePhase.fromPartial(object.roundChangePhase)
      : undefined;
    return message;
  },
};

function createBaseServerEvents(): ServerEvents {
  return { events: [] };
}

export const ServerEvents: MessageFns<ServerEvents> = {
  encode(message: ServerEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      ServerEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(ServerEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvents {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => ServerEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: ServerEvents): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => ServerEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvents>, I>>(base?: I): ServerEvents {
    return ServerEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvents>, I>>(object: I): ServerEvents {
    const message = createBaseServerEvents();
    message.events = object.events?.map((e) => ServerEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCeRename(): CeRename {
  return { name: "" };
}

export const CeRename: MessageFns<CeRename> = {
  encode(message: CeRename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeRename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeRename {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CeRename): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeRename>, I>>(base?: I): CeRename {
    return CeRename.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeRename>, I>>(object: I): CeRename {
    const message = createBaseCeRename();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCeChooseWord(): CeChooseWord {
  return { choice: 0 };
}

export const CeChooseWord: MessageFns<CeChooseWord> = {
  encode(message: CeChooseWord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.choice !== 0) {
      writer.uint32(8).int32(message.choice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeChooseWord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeChooseWord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.choice = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeChooseWord {
    return { choice: isSet(object.choice) ? wordChoiceFromJSON(object.choice) : 0 };
  },

  toJSON(message: CeChooseWord): unknown {
    const obj: any = {};
    if (message.choice !== 0) {
      obj.choice = wordChoiceToJSON(message.choice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeChooseWord>, I>>(base?: I): CeChooseWord {
    return CeChooseWord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeChooseWord>, I>>(object: I): CeChooseWord {
    const message = createBaseCeChooseWord();
    message.choice = object.choice ?? 0;
    return message;
  },
};

function createBaseCeGuessWord(): CeGuessWord {
  return { guess: "", afterDrawOps: 0 };
}

export const CeGuessWord: MessageFns<CeGuessWord> = {
  encode(message: CeGuessWord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guess !== "") {
      writer.uint32(10).string(message.guess);
    }
    if (message.afterDrawOps !== 0) {
      writer.uint32(24).uint32(message.afterDrawOps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeGuessWord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeGuessWord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guess = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.afterDrawOps = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeGuessWord {
    return {
      guess: isSet(object.guess) ? globalThis.String(object.guess) : "",
      afterDrawOps: isSet(object.afterDrawOps) ? globalThis.Number(object.afterDrawOps) : 0,
    };
  },

  toJSON(message: CeGuessWord): unknown {
    const obj: any = {};
    if (message.guess !== "") {
      obj.guess = message.guess;
    }
    if (message.afterDrawOps !== 0) {
      obj.afterDrawOps = Math.round(message.afterDrawOps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeGuessWord>, I>>(base?: I): CeGuessWord {
    return CeGuessWord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeGuessWord>, I>>(object: I): CeGuessWord {
    const message = createBaseCeGuessWord();
    message.guess = object.guess ?? "";
    message.afterDrawOps = object.afterDrawOps ?? 0;
    return message;
  },
};

function createBaseCeLikeRound(): CeLikeRound {
  return { roundId: 0 };
}

export const CeLikeRound: MessageFns<CeLikeRound> = {
  encode(message: CeLikeRound, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roundId !== 0) {
      writer.uint32(8).uint32(message.roundId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeLikeRound {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeLikeRound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roundId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeLikeRound {
    return { roundId: isSet(object.roundId) ? globalThis.Number(object.roundId) : 0 };
  },

  toJSON(message: CeLikeRound): unknown {
    const obj: any = {};
    if (message.roundId !== 0) {
      obj.roundId = Math.round(message.roundId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeLikeRound>, I>>(base?: I): CeLikeRound {
    return CeLikeRound.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeLikeRound>, I>>(object: I): CeLikeRound {
    const message = createBaseCeLikeRound();
    message.roundId = object.roundId ?? 0;
    return message;
  },
};

function createBaseCeDrawOp(): CeDrawOp {
  return { drawOp: undefined };
}

export const CeDrawOp: MessageFns<CeDrawOp> = {
  encode(message: CeDrawOp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.drawOp !== undefined) {
      DrawOp.encode(message.drawOp, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CeDrawOp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCeDrawOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.drawOp = DrawOp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CeDrawOp {
    return { drawOp: isSet(object.drawOp) ? DrawOp.fromJSON(object.drawOp) : undefined };
  },

  toJSON(message: CeDrawOp): unknown {
    const obj: any = {};
    if (message.drawOp !== undefined) {
      obj.drawOp = DrawOp.toJSON(message.drawOp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CeDrawOp>, I>>(base?: I): CeDrawOp {
    return CeDrawOp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CeDrawOp>, I>>(object: I): CeDrawOp {
    const message = createBaseCeDrawOp();
    message.drawOp = (object.drawOp !== undefined && object.drawOp !== null)
      ? DrawOp.fromPartial(object.drawOp)
      : undefined;
    return message;
  },
};

function createBaseClientEvent(): ClientEvent {
  return { rename: undefined, chooseWord: undefined, guessWord: undefined, likeRound: undefined, drawOp: undefined };
}

export const ClientEvent: MessageFns<ClientEvent> = {
  encode(message: ClientEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rename !== undefined) {
      CeRename.encode(message.rename, writer.uint32(10).fork()).join();
    }
    if (message.chooseWord !== undefined) {
      CeChooseWord.encode(message.chooseWord, writer.uint32(18).fork()).join();
    }
    if (message.guessWord !== undefined) {
      CeGuessWord.encode(message.guessWord, writer.uint32(26).fork()).join();
    }
    if (message.likeRound !== undefined) {
      CeLikeRound.encode(message.likeRound, writer.uint32(34).fork()).join();
    }
    if (message.drawOp !== undefined) {
      CeDrawOp.encode(message.drawOp, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rename = CeRename.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chooseWord = CeChooseWord.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.guessWord = CeGuessWord.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.likeRound = CeLikeRound.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.drawOp = CeDrawOp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientEvent {
    return {
      rename: isSet(object.rename) ? CeRename.fromJSON(object.rename) : undefined,
      chooseWord: isSet(object.chooseWord) ? CeChooseWord.fromJSON(object.chooseWord) : undefined,
      guessWord: isSet(object.guessWord) ? CeGuessWord.fromJSON(object.guessWord) : undefined,
      likeRound: isSet(object.likeRound) ? CeLikeRound.fromJSON(object.likeRound) : undefined,
      drawOp: isSet(object.drawOp) ? CeDrawOp.fromJSON(object.drawOp) : undefined,
    };
  },

  toJSON(message: ClientEvent): unknown {
    const obj: any = {};
    if (message.rename !== undefined) {
      obj.rename = CeRename.toJSON(message.rename);
    }
    if (message.chooseWord !== undefined) {
      obj.chooseWord = CeChooseWord.toJSON(message.chooseWord);
    }
    if (message.guessWord !== undefined) {
      obj.guessWord = CeGuessWord.toJSON(message.guessWord);
    }
    if (message.likeRound !== undefined) {
      obj.likeRound = CeLikeRound.toJSON(message.likeRound);
    }
    if (message.drawOp !== undefined) {
      obj.drawOp = CeDrawOp.toJSON(message.drawOp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientEvent>, I>>(base?: I): ClientEvent {
    return ClientEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientEvent>, I>>(object: I): ClientEvent {
    const message = createBaseClientEvent();
    message.rename = (object.rename !== undefined && object.rename !== null)
      ? CeRename.fromPartial(object.rename)
      : undefined;
    message.chooseWord = (object.chooseWord !== undefined && object.chooseWord !== null)
      ? CeChooseWord.fromPartial(object.chooseWord)
      : undefined;
    message.guessWord = (object.guessWord !== undefined && object.guessWord !== null)
      ? CeGuessWord.fromPartial(object.guessWord)
      : undefined;
    message.likeRound = (object.likeRound !== undefined && object.likeRound !== null)
      ? CeLikeRound.fromPartial(object.likeRound)
      : undefined;
    message.drawOp = (object.drawOp !== undefined && object.drawOp !== null)
      ? CeDrawOp.fromPartial(object.drawOp)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
