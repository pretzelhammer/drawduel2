// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.6.1
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game";

export enum ErrorType {
  UNKNOWN = 0,
  ALREADY_CONNECTED = 1,
  FULL_GAME = 2,
  UNRECOGNIZED = -1,
}

export function errorTypeFromJSON(object: any): ErrorType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ErrorType.UNKNOWN;
    case 1:
    case "ALREADY_CONNECTED":
      return ErrorType.ALREADY_CONNECTED;
    case 2:
    case "FULL_GAME":
      return ErrorType.FULL_GAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ErrorType.UNRECOGNIZED;
  }
}

export function errorTypeToJSON(object: ErrorType): string {
  switch (object) {
    case ErrorType.UNKNOWN:
      return "UNKNOWN";
    case ErrorType.ALREADY_CONNECTED:
      return "ALREADY_CONNECTED";
    case ErrorType.FULL_GAME:
      return "FULL_GAME";
    case ErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GameState {
  players: { [key: number]: Player };
  admin: number;
}

export interface GameState_PlayersEntry {
  key: number;
  value: Player | undefined;
}

export interface Player {
  name: string;
  score: number;
  connected: boolean;
  ready: boolean;
}

export interface ServerEventSetGameState {
  playerId: number;
  gameState: GameState | undefined;
}

export interface ServerEventError {
  type: ErrorType;
  message: string;
}

export interface ServerEventPlayerJoin {
  id: number;
  name: string;
}

export interface ServerEventPlayerConnect {
  id: number;
}

export interface ServerEventPlayerLeave {
  id: number;
}

export interface ServerEventPlayerDisconnect {
  id: number;
}

export interface ServerEventPlayerRename {
  id: number;
  name: string;
}

export interface ServerEventPlayerIncreaseScore {
  id: number;
  score: number;
}

export interface ServerEvent {
  playerJoin?: ServerEventPlayerJoin | undefined;
  playerLeave?: ServerEventPlayerLeave | undefined;
  playerRename?: ServerEventPlayerRename | undefined;
  playerIncreaseScore?: ServerEventPlayerIncreaseScore | undefined;
  setGameState?: ServerEventSetGameState | undefined;
  error?: ServerEventError | undefined;
  playerConnect?: ServerEventPlayerConnect | undefined;
  playerDisconnect?: ServerEventPlayerDisconnect | undefined;
}

export interface ServerEvents {
  events: ServerEvent[];
}

export interface PlayerEventRename {
  name: string;
}

export interface PlayerEventIncreaseScore {
  score: number;
}

export interface PlayerEvent {
  rename?: PlayerEventRename | undefined;
  increaseScore?: PlayerEventIncreaseScore | undefined;
}

function createBaseGameState(): GameState {
  return { players: {}, admin: 0 };
}

export const GameState: MessageFns<GameState> = {
  encode(message: GameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.players).forEach(([key, value]) => {
      GameState_PlayersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.admin !== 0) {
      writer.uint32(16).uint32(message.admin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = GameState_PlayersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.players[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.admin = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState {
    return {
      players: isObject(object.players)
        ? Object.entries(object.players).reduce<{ [key: number]: Player }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Player.fromJSON(value);
          return acc;
        }, {})
        : {},
      admin: isSet(object.admin) ? globalThis.Number(object.admin) : 0,
    };
  },

  toJSON(message: GameState): unknown {
    const obj: any = {};
    if (message.players) {
      const entries = Object.entries(message.players);
      if (entries.length > 0) {
        obj.players = {};
        entries.forEach(([k, v]) => {
          obj.players[k] = Player.toJSON(v);
        });
      }
    }
    if (message.admin !== 0) {
      obj.admin = Math.round(message.admin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameState>, I>>(base?: I): GameState {
    return GameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState>, I>>(object: I): GameState {
    const message = createBaseGameState();
    message.players = Object.entries(object.players ?? {}).reduce<{ [key: number]: Player }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Player.fromPartial(value);
      }
      return acc;
    }, {});
    message.admin = object.admin ?? 0;
    return message;
  },
};

function createBaseGameState_PlayersEntry(): GameState_PlayersEntry {
  return { key: 0, value: undefined };
}

export const GameState_PlayersEntry: MessageFns<GameState_PlayersEntry> = {
  encode(message: GameState_PlayersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Player.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState_PlayersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState_PlayersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Player.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState_PlayersEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Player.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GameState_PlayersEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Player.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameState_PlayersEntry>, I>>(base?: I): GameState_PlayersEntry {
    return GameState_PlayersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState_PlayersEntry>, I>>(object: I): GameState_PlayersEntry {
    const message = createBaseGameState_PlayersEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Player.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePlayer(): Player {
  return { name: "", score: 0, connected: false, ready: false };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.score !== 0) {
      writer.uint32(24).uint32(message.score);
    }
    if (message.connected !== false) {
      writer.uint32(32).bool(message.connected);
    }
    if (message.ready !== false) {
      writer.uint32(40).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.connected = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      connected: isSet(object.connected) ? globalThis.Boolean(object.connected) : false,
      ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.connected !== false) {
      obj.connected = message.connected;
    }
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.name = object.name ?? "";
    message.score = object.score ?? 0;
    message.connected = object.connected ?? false;
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBaseServerEventSetGameState(): ServerEventSetGameState {
  return { playerId: 0, gameState: undefined };
}

export const ServerEventSetGameState: MessageFns<ServerEventSetGameState> = {
  encode(message: ServerEventSetGameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).uint32(message.playerId);
    }
    if (message.gameState !== undefined) {
      GameState.encode(message.gameState, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventSetGameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventSetGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameState = GameState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventSetGameState {
    return {
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      gameState: isSet(object.gameState) ? GameState.fromJSON(object.gameState) : undefined,
    };
  },

  toJSON(message: ServerEventSetGameState): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.gameState !== undefined) {
      obj.gameState = GameState.toJSON(message.gameState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventSetGameState>, I>>(base?: I): ServerEventSetGameState {
    return ServerEventSetGameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventSetGameState>, I>>(object: I): ServerEventSetGameState {
    const message = createBaseServerEventSetGameState();
    message.playerId = object.playerId ?? 0;
    message.gameState = (object.gameState !== undefined && object.gameState !== null)
      ? GameState.fromPartial(object.gameState)
      : undefined;
    return message;
  },
};

function createBaseServerEventError(): ServerEventError {
  return { type: 0, message: "" };
}

export const ServerEventError: MessageFns<ServerEventError> = {
  encode(message: ServerEventError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventError {
    return {
      type: isSet(object.type) ? errorTypeFromJSON(object.type) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ServerEventError): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = errorTypeToJSON(message.type);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventError>, I>>(base?: I): ServerEventError {
    return ServerEventError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventError>, I>>(object: I): ServerEventError {
    const message = createBaseServerEventError();
    message.type = object.type ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseServerEventPlayerJoin(): ServerEventPlayerJoin {
  return { id: 0, name: "" };
}

export const ServerEventPlayerJoin: MessageFns<ServerEventPlayerJoin> = {
  encode(message: ServerEventPlayerJoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventPlayerJoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventPlayerJoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventPlayerJoin {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ServerEventPlayerJoin): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventPlayerJoin>, I>>(base?: I): ServerEventPlayerJoin {
    return ServerEventPlayerJoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventPlayerJoin>, I>>(object: I): ServerEventPlayerJoin {
    const message = createBaseServerEventPlayerJoin();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseServerEventPlayerConnect(): ServerEventPlayerConnect {
  return { id: 0 };
}

export const ServerEventPlayerConnect: MessageFns<ServerEventPlayerConnect> = {
  encode(message: ServerEventPlayerConnect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventPlayerConnect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventPlayerConnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventPlayerConnect {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ServerEventPlayerConnect): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventPlayerConnect>, I>>(base?: I): ServerEventPlayerConnect {
    return ServerEventPlayerConnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventPlayerConnect>, I>>(object: I): ServerEventPlayerConnect {
    const message = createBaseServerEventPlayerConnect();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseServerEventPlayerLeave(): ServerEventPlayerLeave {
  return { id: 0 };
}

export const ServerEventPlayerLeave: MessageFns<ServerEventPlayerLeave> = {
  encode(message: ServerEventPlayerLeave, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventPlayerLeave {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventPlayerLeave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventPlayerLeave {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ServerEventPlayerLeave): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventPlayerLeave>, I>>(base?: I): ServerEventPlayerLeave {
    return ServerEventPlayerLeave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventPlayerLeave>, I>>(object: I): ServerEventPlayerLeave {
    const message = createBaseServerEventPlayerLeave();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseServerEventPlayerDisconnect(): ServerEventPlayerDisconnect {
  return { id: 0 };
}

export const ServerEventPlayerDisconnect: MessageFns<ServerEventPlayerDisconnect> = {
  encode(message: ServerEventPlayerDisconnect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventPlayerDisconnect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventPlayerDisconnect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventPlayerDisconnect {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ServerEventPlayerDisconnect): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventPlayerDisconnect>, I>>(base?: I): ServerEventPlayerDisconnect {
    return ServerEventPlayerDisconnect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventPlayerDisconnect>, I>>(object: I): ServerEventPlayerDisconnect {
    const message = createBaseServerEventPlayerDisconnect();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseServerEventPlayerRename(): ServerEventPlayerRename {
  return { id: 0, name: "" };
}

export const ServerEventPlayerRename: MessageFns<ServerEventPlayerRename> = {
  encode(message: ServerEventPlayerRename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventPlayerRename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventPlayerRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventPlayerRename {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ServerEventPlayerRename): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventPlayerRename>, I>>(base?: I): ServerEventPlayerRename {
    return ServerEventPlayerRename.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventPlayerRename>, I>>(object: I): ServerEventPlayerRename {
    const message = createBaseServerEventPlayerRename();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseServerEventPlayerIncreaseScore(): ServerEventPlayerIncreaseScore {
  return { id: 0, score: 0 };
}

export const ServerEventPlayerIncreaseScore: MessageFns<ServerEventPlayerIncreaseScore> = {
  encode(message: ServerEventPlayerIncreaseScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.score !== 0) {
      writer.uint32(16).uint32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEventPlayerIncreaseScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEventPlayerIncreaseScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEventPlayerIncreaseScore {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: ServerEventPlayerIncreaseScore): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEventPlayerIncreaseScore>, I>>(base?: I): ServerEventPlayerIncreaseScore {
    return ServerEventPlayerIncreaseScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEventPlayerIncreaseScore>, I>>(
    object: I,
  ): ServerEventPlayerIncreaseScore {
    const message = createBaseServerEventPlayerIncreaseScore();
    message.id = object.id ?? 0;
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseServerEvent(): ServerEvent {
  return {
    playerJoin: undefined,
    playerLeave: undefined,
    playerRename: undefined,
    playerIncreaseScore: undefined,
    setGameState: undefined,
    error: undefined,
    playerConnect: undefined,
    playerDisconnect: undefined,
  };
}

export const ServerEvent: MessageFns<ServerEvent> = {
  encode(message: ServerEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerJoin !== undefined) {
      ServerEventPlayerJoin.encode(message.playerJoin, writer.uint32(10).fork()).join();
    }
    if (message.playerLeave !== undefined) {
      ServerEventPlayerLeave.encode(message.playerLeave, writer.uint32(18).fork()).join();
    }
    if (message.playerRename !== undefined) {
      ServerEventPlayerRename.encode(message.playerRename, writer.uint32(26).fork()).join();
    }
    if (message.playerIncreaseScore !== undefined) {
      ServerEventPlayerIncreaseScore.encode(message.playerIncreaseScore, writer.uint32(34).fork()).join();
    }
    if (message.setGameState !== undefined) {
      ServerEventSetGameState.encode(message.setGameState, writer.uint32(42).fork()).join();
    }
    if (message.error !== undefined) {
      ServerEventError.encode(message.error, writer.uint32(50).fork()).join();
    }
    if (message.playerConnect !== undefined) {
      ServerEventPlayerConnect.encode(message.playerConnect, writer.uint32(58).fork()).join();
    }
    if (message.playerDisconnect !== undefined) {
      ServerEventPlayerDisconnect.encode(message.playerDisconnect, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerJoin = ServerEventPlayerJoin.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerLeave = ServerEventPlayerLeave.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerRename = ServerEventPlayerRename.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playerIncreaseScore = ServerEventPlayerIncreaseScore.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.setGameState = ServerEventSetGameState.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.error = ServerEventError.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.playerConnect = ServerEventPlayerConnect.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.playerDisconnect = ServerEventPlayerDisconnect.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvent {
    return {
      playerJoin: isSet(object.playerJoin) ? ServerEventPlayerJoin.fromJSON(object.playerJoin) : undefined,
      playerLeave: isSet(object.playerLeave) ? ServerEventPlayerLeave.fromJSON(object.playerLeave) : undefined,
      playerRename: isSet(object.playerRename) ? ServerEventPlayerRename.fromJSON(object.playerRename) : undefined,
      playerIncreaseScore: isSet(object.playerIncreaseScore)
        ? ServerEventPlayerIncreaseScore.fromJSON(object.playerIncreaseScore)
        : undefined,
      setGameState: isSet(object.setGameState) ? ServerEventSetGameState.fromJSON(object.setGameState) : undefined,
      error: isSet(object.error) ? ServerEventError.fromJSON(object.error) : undefined,
      playerConnect: isSet(object.playerConnect) ? ServerEventPlayerConnect.fromJSON(object.playerConnect) : undefined,
      playerDisconnect: isSet(object.playerDisconnect)
        ? ServerEventPlayerDisconnect.fromJSON(object.playerDisconnect)
        : undefined,
    };
  },

  toJSON(message: ServerEvent): unknown {
    const obj: any = {};
    if (message.playerJoin !== undefined) {
      obj.playerJoin = ServerEventPlayerJoin.toJSON(message.playerJoin);
    }
    if (message.playerLeave !== undefined) {
      obj.playerLeave = ServerEventPlayerLeave.toJSON(message.playerLeave);
    }
    if (message.playerRename !== undefined) {
      obj.playerRename = ServerEventPlayerRename.toJSON(message.playerRename);
    }
    if (message.playerIncreaseScore !== undefined) {
      obj.playerIncreaseScore = ServerEventPlayerIncreaseScore.toJSON(message.playerIncreaseScore);
    }
    if (message.setGameState !== undefined) {
      obj.setGameState = ServerEventSetGameState.toJSON(message.setGameState);
    }
    if (message.error !== undefined) {
      obj.error = ServerEventError.toJSON(message.error);
    }
    if (message.playerConnect !== undefined) {
      obj.playerConnect = ServerEventPlayerConnect.toJSON(message.playerConnect);
    }
    if (message.playerDisconnect !== undefined) {
      obj.playerDisconnect = ServerEventPlayerDisconnect.toJSON(message.playerDisconnect);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvent>, I>>(base?: I): ServerEvent {
    return ServerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvent>, I>>(object: I): ServerEvent {
    const message = createBaseServerEvent();
    message.playerJoin = (object.playerJoin !== undefined && object.playerJoin !== null)
      ? ServerEventPlayerJoin.fromPartial(object.playerJoin)
      : undefined;
    message.playerLeave = (object.playerLeave !== undefined && object.playerLeave !== null)
      ? ServerEventPlayerLeave.fromPartial(object.playerLeave)
      : undefined;
    message.playerRename = (object.playerRename !== undefined && object.playerRename !== null)
      ? ServerEventPlayerRename.fromPartial(object.playerRename)
      : undefined;
    message.playerIncreaseScore = (object.playerIncreaseScore !== undefined && object.playerIncreaseScore !== null)
      ? ServerEventPlayerIncreaseScore.fromPartial(object.playerIncreaseScore)
      : undefined;
    message.setGameState = (object.setGameState !== undefined && object.setGameState !== null)
      ? ServerEventSetGameState.fromPartial(object.setGameState)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ServerEventError.fromPartial(object.error)
      : undefined;
    message.playerConnect = (object.playerConnect !== undefined && object.playerConnect !== null)
      ? ServerEventPlayerConnect.fromPartial(object.playerConnect)
      : undefined;
    message.playerDisconnect = (object.playerDisconnect !== undefined && object.playerDisconnect !== null)
      ? ServerEventPlayerDisconnect.fromPartial(object.playerDisconnect)
      : undefined;
    return message;
  },
};

function createBaseServerEvents(): ServerEvents {
  return { events: [] };
}

export const ServerEvents: MessageFns<ServerEvents> = {
  encode(message: ServerEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      ServerEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(ServerEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEvents {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => ServerEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: ServerEvents): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => ServerEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerEvents>, I>>(base?: I): ServerEvents {
    return ServerEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerEvents>, I>>(object: I): ServerEvents {
    const message = createBaseServerEvents();
    message.events = object.events?.map((e) => ServerEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlayerEventRename(): PlayerEventRename {
  return { name: "" };
}

export const PlayerEventRename: MessageFns<PlayerEventRename> = {
  encode(message: PlayerEventRename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerEventRename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEventRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEventRename {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PlayerEventRename): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEventRename>, I>>(base?: I): PlayerEventRename {
    return PlayerEventRename.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerEventRename>, I>>(object: I): PlayerEventRename {
    const message = createBasePlayerEventRename();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePlayerEventIncreaseScore(): PlayerEventIncreaseScore {
  return { score: 0 };
}

export const PlayerEventIncreaseScore: MessageFns<PlayerEventIncreaseScore> = {
  encode(message: PlayerEventIncreaseScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.score !== 0) {
      writer.uint32(8).uint32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerEventIncreaseScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEventIncreaseScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEventIncreaseScore {
    return { score: isSet(object.score) ? globalThis.Number(object.score) : 0 };
  },

  toJSON(message: PlayerEventIncreaseScore): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEventIncreaseScore>, I>>(base?: I): PlayerEventIncreaseScore {
    return PlayerEventIncreaseScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerEventIncreaseScore>, I>>(object: I): PlayerEventIncreaseScore {
    const message = createBasePlayerEventIncreaseScore();
    message.score = object.score ?? 0;
    return message;
  },
};

function createBasePlayerEvent(): PlayerEvent {
  return { rename: undefined, increaseScore: undefined };
}

export const PlayerEvent: MessageFns<PlayerEvent> = {
  encode(message: PlayerEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rename !== undefined) {
      PlayerEventRename.encode(message.rename, writer.uint32(10).fork()).join();
    }
    if (message.increaseScore !== undefined) {
      PlayerEventIncreaseScore.encode(message.increaseScore, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rename = PlayerEventRename.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.increaseScore = PlayerEventIncreaseScore.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEvent {
    return {
      rename: isSet(object.rename) ? PlayerEventRename.fromJSON(object.rename) : undefined,
      increaseScore: isSet(object.increaseScore) ? PlayerEventIncreaseScore.fromJSON(object.increaseScore) : undefined,
    };
  },

  toJSON(message: PlayerEvent): unknown {
    const obj: any = {};
    if (message.rename !== undefined) {
      obj.rename = PlayerEventRename.toJSON(message.rename);
    }
    if (message.increaseScore !== undefined) {
      obj.increaseScore = PlayerEventIncreaseScore.toJSON(message.increaseScore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEvent>, I>>(base?: I): PlayerEvent {
    return PlayerEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerEvent>, I>>(object: I): PlayerEvent {
    const message = createBasePlayerEvent();
    message.rename = (object.rename !== undefined && object.rename !== null)
      ? PlayerEventRename.fromPartial(object.rename)
      : undefined;
    message.increaseScore = (object.increaseScore !== undefined && object.increaseScore !== null)
      ? PlayerEventIncreaseScore.fromPartial(object.increaseScore)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
