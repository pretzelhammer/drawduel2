// @generated
// This file is @generated by prost-build.
/// Message representing a player joining.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerJoined {
    #[prost(uint32, tag="1")]
    pub id: u32,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
/// Message representing a player leaving.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLeft {
    #[prost(uint32, tag="1")]
    pub id: u32,
}
/// Message representing a player renaming themselves.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerRename {
    #[prost(uint32, tag="1")]
    pub id: u32,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
/// Message representing a player increasing their score.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerIncreaseScore {
    #[prost(uint32, tag="1")]
    pub id: u32,
    #[prost(uint32, tag="2")]
    pub score: u32,
}
/// Union of different event types, modeled as a oneof.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    #[prost(oneof="event::Event", tags="1, 2, 3, 4")]
    pub event: ::core::option::Option<event::Event>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag="1")]
        PlayerJoined(super::PlayerJoined),
        #[prost(message, tag="2")]
        PlayerLeft(super::PlayerLeft),
        #[prost(message, tag="3")]
        PlayerRename(super::PlayerRename),
        #[prost(message, tag="4")]
        PlayerIncreaseScore(super::PlayerIncreaseScore),
    }
}
/// Message representing a list of events.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventList {
    #[prost(message, repeated, tag="1")]
    pub events: ::prost::alloc::vec::Vec<Event>,
}
// @@protoc_insertion_point(module)
