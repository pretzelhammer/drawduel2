// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { PlayerIncreaseScore } from '../server-event/player-increase-score.js';
import { PlayerJoin } from '../server-event/player-join.js';
import { PlayerLeave } from '../server-event/player-leave.js';
import { PlayerRename } from '../server-event/player-rename.js';


export enum EventUnion {
  NONE = 0,
  PlayerJoin = 1,
  PlayerLeave = 2,
  PlayerRename = 3,
  PlayerIncreaseScore = 4
}

export function unionToEventUnion(
  type: EventUnion,
  accessor: (obj:PlayerIncreaseScore|PlayerJoin|PlayerLeave|PlayerRename) => PlayerIncreaseScore|PlayerJoin|PlayerLeave|PlayerRename|null
): PlayerIncreaseScore|PlayerJoin|PlayerLeave|PlayerRename|null {
  switch(EventUnion[type]) {
    case 'NONE': return null; 
    case 'PlayerJoin': return accessor(new PlayerJoin())! as PlayerJoin;
    case 'PlayerLeave': return accessor(new PlayerLeave())! as PlayerLeave;
    case 'PlayerRename': return accessor(new PlayerRename())! as PlayerRename;
    case 'PlayerIncreaseScore': return accessor(new PlayerIncreaseScore())! as PlayerIncreaseScore;
    default: return null;
  }
}

export function unionListToEventUnion(
  type: EventUnion, 
  accessor: (index: number, obj:PlayerIncreaseScore|PlayerJoin|PlayerLeave|PlayerRename) => PlayerIncreaseScore|PlayerJoin|PlayerLeave|PlayerRename|null, 
  index: number
): PlayerIncreaseScore|PlayerJoin|PlayerLeave|PlayerRename|null {
  switch(EventUnion[type]) {
    case 'NONE': return null; 
    case 'PlayerJoin': return accessor(index, new PlayerJoin())! as PlayerJoin;
    case 'PlayerLeave': return accessor(index, new PlayerLeave())! as PlayerLeave;
    case 'PlayerRename': return accessor(index, new PlayerRename())! as PlayerRename;
    case 'PlayerIncreaseScore': return accessor(index, new PlayerIncreaseScore())! as PlayerIncreaseScore;
    default: return null;
  }
}
