// @generated
// This file is @generated by prost-build.
// GAME STATE

#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Game {
    #[prost(map="uint32, message", tag="1")]
    pub players: ::std::collections::HashMap<u32, Player>,
    #[prost(message, optional, tag="2")]
    pub round: ::core::option::Option<Round>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Player {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub draw_score: u32,
    #[prost(uint32, tag="4")]
    pub guess_score: u32,
    #[prost(uint32, tag="5")]
    pub round_score: u32,
    #[prost(bool, tag="6")]
    pub connected: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Round {
    #[prost(uint32, tag="1")]
    pub round_id: u32,
    #[prost(enumeration="Phase", tag="10")]
    pub phase: i32,
    #[prost(uint64, tag="12")]
    pub phase_ends_at: u64,
    #[prost(uint32, tag="2")]
    pub drawer_id: u32,
    #[prost(message, repeated, tag="3")]
    pub draw_ops: ::prost::alloc::vec::Vec<DrawOp>,
    #[prost(uint32, tag="4")]
    pub easy_word: u32,
    #[prost(uint32, tag="5")]
    pub hard_word: u32,
    #[prost(enumeration="WordChoice", tag="11")]
    pub word_choice: i32,
    #[prost(uint32, tag="6")]
    pub draw_score: u32,
    #[prost(uint32, tag="7")]
    pub guess_score: u32,
    #[prost(message, repeated, tag="8")]
    pub guesses: ::prost::alloc::vec::Vec<Guess>,
    #[prost(message, repeated, tag="9")]
    pub hints: ::prost::alloc::vec::Vec<Hint>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Guess {
    #[prost(uint32, tag="1")]
    pub guesser_id: u32,
    #[prost(uint32, tag="4")]
    pub after_draw_ops: u32,
    #[prost(oneof="guess::GuessType", tags="2, 3")]
    pub guess_type: ::core::option::Option<guess::GuessType>,
}
/// Nested message and enum types in `Guess`.
pub mod guess {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum GuessType {
        #[prost(message, tag="2")]
        IncorrectGuess(super::IncorrectGuess),
        #[prost(message, tag="3")]
        CorrectGuess(super::CorrectGuess),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncorrectGuess {
    #[prost(string, tag="1")]
    pub guess: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CorrectGuess {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hint {
    #[prost(uint32, tag="3")]
    pub after_draw_ops: u32,
    #[prost(oneof="hint::HintType", tags="1, 2")]
    pub hint_type: ::core::option::Option<hint::HintType>,
}
/// Nested message and enum types in `Hint`.
pub mod hint {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HintType {
        #[prost(message, tag="1")]
        RevealLength(super::RevealLength),
        #[prost(message, tag="2")]
        RevealLetter(super::RevealLetter),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RevealLength {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RevealLetter {
    #[prost(uint32, tag="1")]
    pub index: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrawOp {
    #[prost(oneof="draw_op::DoType", tags="1, 2, 3, 4, 5, 6")]
    pub do_type: ::core::option::Option<draw_op::DoType>,
}
/// Nested message and enum types in `DrawOp`.
pub mod draw_op {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum DoType {
        #[prost(message, tag="1")]
        SetColor(super::DoSetColor),
        #[prost(message, tag="2")]
        StartStroke(super::DoStartStroke),
        #[prost(message, tag="3")]
        ContinueStroke(super::DoContinueStroke),
        #[prost(message, tag="4")]
        ClearScreen(super::DoClearScreen),
        #[prost(message, tag="5")]
        Undo(super::DoUndo),
        #[prost(message, tag="6")]
        Redo(super::DoRedo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoSetColor {
    #[prost(enumeration="ColorType", tag="1")]
    pub color_type: i32,
    #[prost(string, tag="2")]
    pub color: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoStartStroke {
    #[prost(enumeration="ColorType", tag="1")]
    pub color_type: i32,
    #[prost(float, tag="2")]
    pub x: f32,
    #[prost(float, tag="3")]
    pub y: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoContinueStroke {
    #[prost(float, tag="1")]
    pub x: f32,
    #[prost(float, tag="2")]
    pub y: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoClearScreen {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoUndo {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoRedo {
}
// SERVER EVENTS
// Se = \[S\]erver \[e\]vent
// mostly represent game state transitions
// but can also be other things, like
// communicating server errors to client

#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeSetGame {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
    #[prost(message, optional, tag="2")]
    pub game: ::core::option::Option<Game>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeError {
    #[prost(enumeration="SeErrorType", tag="1")]
    pub se_error_type: i32,
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SePlayerJoin {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerLeave {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerConnect {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerDisconnect {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SePlayerRename {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerIncRoundScore {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
    #[prost(uint32, tag="2")]
    pub inc_by: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerIncDrawScore {
    #[prost(uint32, tag="1")]
    pub drawer_id: u32,
    #[prost(uint32, tag="2")]
    pub inc_by: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerIncGuessScore {
    #[prost(uint32, tag="1")]
    pub guesser_id: u32,
    #[prost(uint32, tag="2")]
    pub inc_by: u32,
}
/// round_id not necessary as it always
/// refers to the current round
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeRoundIncDrawScore {
    #[prost(uint32, tag="1")]
    pub inc_by: u32,
}
/// round_id not necessary as it always
/// refers to the current round
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeRoundIncGuessScore {
    #[prost(uint32, tag="1")]
    pub inc_by: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SePlayerDrawOp {
    #[prost(uint32, tag="1")]
    pub drawer_id: u32,
    #[prost(message, optional, tag="2")]
    pub draw_op: ::core::option::Option<DrawOp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeRoundNew {
    #[prost(uint32, tag="1")]
    pub round_id: u32,
    #[prost(uint32, tag="2")]
    pub drawer_id: u32,
    #[prost(uint32, tag="3")]
    pub easy_word: u32,
    #[prost(uint32, tag="4")]
    pub hard_word: u32,
    #[prost(enumeration="Phase", tag="5")]
    pub starting_phase: i32,
    #[prost(uint64, tag="6")]
    pub phase_ends_at: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeRoundChangePhase {
    #[prost(enumeration="Phase", tag="1")]
    pub phase: i32,
    #[prost(uint64, tag="2")]
    pub phase_ends_at: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerChooseWord {
    #[prost(uint32, tag="1")]
    pub drawer_id: u32,
    #[prost(enumeration="WordChoice", tag="2")]
    pub choice: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SePlayerGuessWord {
    #[prost(uint32, tag="1")]
    pub guesser_id: u32,
    #[prost(string, tag="2")]
    pub guess: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub after_draw_ops: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SePlayerLikeRound {
    #[prost(uint32, tag="1")]
    pub player_id: u32,
    #[prost(uint32, tag="2")]
    pub round_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerEvent {
    #[prost(oneof="server_event::SeType", tags="1, 2, 3, 4, 10, 11, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18")]
    pub se_type: ::core::option::Option<server_event::SeType>,
}
/// Nested message and enum types in `ServerEvent`.
pub mod server_event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum SeType {
        #[prost(message, tag="1")]
        PlayerJoin(super::SePlayerJoin),
        #[prost(message, tag="2")]
        PlayerLeave(super::SePlayerLeave),
        #[prost(message, tag="3")]
        PlayerRename(super::SePlayerRename),
        #[prost(message, tag="4")]
        PlayerIncRoundScore(super::SePlayerIncRoundScore),
        #[prost(message, tag="10")]
        PlayerIncDrawScore(super::SePlayerIncDrawScore),
        #[prost(message, tag="11")]
        PlayerIncGuessScore(super::SePlayerIncGuessScore),
        #[prost(message, tag="5")]
        SetGame(super::SeSetGame),
        #[prost(message, tag="6")]
        Error(super::SeError),
        #[prost(message, tag="7")]
        PlayerConnect(super::SePlayerConnect),
        #[prost(message, tag="8")]
        PlayerDisconnect(super::SePlayerDisconnect),
        #[prost(message, tag="9")]
        PlayerDrawOp(super::SePlayerDrawOp),
        #[prost(message, tag="12")]
        NewRound(super::SeRoundNew),
        #[prost(message, tag="13")]
        PlayerChooseWord(super::SePlayerChooseWord),
        #[prost(message, tag="14")]
        PlayerGuessWord(super::SePlayerGuessWord),
        #[prost(message, tag="15")]
        PlayerLikeRound(super::SePlayerLikeRound),
        #[prost(message, tag="16")]
        RoundIncDrawScore(super::SeRoundIncDrawScore),
        #[prost(message, tag="17")]
        RoundIncGuessScore(super::SeRoundIncGuessScore),
        #[prost(message, tag="18")]
        RoundChangePhase(super::SeRoundChangePhase),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerEvents {
    #[prost(message, repeated, tag="1")]
    pub events: ::prost::alloc::vec::Vec<ServerEvent>,
}
// CLIENT EVENTS
// Ce = \[C\]lient \[e\]vent
// mostly represent player actions

#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CeRename {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CeChooseWord {
    #[prost(enumeration="WordChoice", tag="1")]
    pub choice: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CeGuessWord {
    #[prost(string, tag="1")]
    pub guess: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub after_draw_ops: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CeLikeRound {
    #[prost(uint32, tag="1")]
    pub round_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CeDrawOp {
    #[prost(message, optional, tag="1")]
    pub draw_op: ::core::option::Option<DrawOp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientEvent {
    #[prost(oneof="client_event::CeType", tags="1, 2, 3, 4, 5")]
    pub ce_type: ::core::option::Option<client_event::CeType>,
}
/// Nested message and enum types in `ClientEvent`.
pub mod client_event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CeType {
        #[prost(message, tag="1")]
        Rename(super::CeRename),
        #[prost(message, tag="2")]
        ChooseWord(super::CeChooseWord),
        #[prost(message, tag="3")]
        GuessWord(super::CeGuessWord),
        #[prost(message, tag="4")]
        LikeRound(super::CeLikeRound),
        #[prost(message, tag="5")]
        DrawOp(super::CeDrawOp),
    }
}
/// choose word 10 secs
/// pre play 5 secs
/// play 45 - 60 secs
/// post play 5 secs
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Phase {
    ChooseWord = 0,
    PrePlay = 1,
    Play = 2,
    PostPlay = 3,
}
impl Phase {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChooseWord => "CHOOSE_WORD",
            Self::PrePlay => "PRE_PLAY",
            Self::Play => "PLAY",
            Self::PostPlay => "POST_PLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHOOSE_WORD" => Some(Self::ChooseWord),
            "PRE_PLAY" => Some(Self::PrePlay),
            "PLAY" => Some(Self::Play),
            "POST_PLAY" => Some(Self::PostPlay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WordChoice {
    Easy = 0,
    Hard = 1,
}
impl WordChoice {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Easy => "EASY",
            Self::Hard => "HARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EASY" => Some(Self::Easy),
            "HARD" => Some(Self::Hard),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ColorType {
    Primary = 0,
    Secondary = 1,
}
impl ColorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Primary => "PRIMARY",
            Self::Secondary => "SECONDARY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRIMARY" => Some(Self::Primary),
            "SECONDARY" => Some(Self::Secondary),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeErrorType {
    Unknown = 0,
    AlreadyConnected = 1,
    FullGame = 2,
}
impl SeErrorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::AlreadyConnected => "ALREADY_CONNECTED",
            Self::FullGame => "FULL_GAME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "ALREADY_CONNECTED" => Some(Self::AlreadyConnected),
            "FULL_GAME" => Some(Self::FullGame),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
